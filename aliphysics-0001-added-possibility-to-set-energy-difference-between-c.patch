From 8d71a124b18cebc662478f4700503056b897254b Mon Sep 17 00:00:00 2001
From: fbock <friederike.bock@cern.ch>
Date: Tue, 26 Apr 2016 16:20:54 +0200
Subject: [PATCH] added possibility to set energy difference between cells for
 start of new cluster in V2 clusterization case

---
 PWG/EMCAL/macros/AddTaskEMCALTender.C          | 153 +++++++++++++------------
 PWG/EMCAL/macros/ConfigEmcalTenderSupply.C     |  42 +++----
 TENDER/TenderSupplies/AliEMCALTenderSupply.cxx |   2 +-
 3 files changed, 100 insertions(+), 97 deletions(-)

diff --git a/PWG/EMCAL/macros/AddTaskEMCALTender.C b/PWG/EMCAL/macros/AddTaskEMCALTender.C
index 2869b87..cd3eb95 100644
--- a/PWG/EMCAL/macros/AddTaskEMCALTender.C
+++ b/PWG/EMCAL/macros/AddTaskEMCALTender.C
@@ -2,29 +2,30 @@
 /// EMCal Tender configuration macro
 ///
 AliAnalysisTaskSE *AddTaskEMCALTender(
-  Bool_t distBC         = kTRUE,   //distance to bad channel
-  Bool_t recalibClus    = kTRUE,   //recalibrate cluster energy
-  Bool_t recalcClusPos  = kTRUE,   //recalculate cluster position
-  Bool_t nonLinearCorr  = kTRUE,   //apply non-linearity
-  Bool_t remExoticCell  = kTRUE,   //remove exotic cells
-  Bool_t remExoticClus  = kTRUE,   //remove exotic clusters
-  Bool_t fidRegion      = kFALSE,  //apply fiducial cuts
-  Bool_t calibEnergy    = kTRUE,   //calibrate energy
-  Bool_t calibTime      = kTRUE,   //calibrate timing
-  Bool_t remBC          = kTRUE,   //remove bad channels
-  UInt_t nonLinFunct    = AliEMCALRecoUtils::kBeamTestCorrected,
-  Bool_t reclusterize   = kTRUE,   //reclusterize
-  Float_t seedthresh    = 0.100,   //seed threshold
-  Float_t cellthresh    = 0.050,   //cell threshold
-  UInt_t clusterizer    = AliEMCALRecParam::kClusterizerv2,
-  Bool_t trackMatch     = kTRUE,   //track matching
-  Bool_t updateCellOnly = kFALSE,  //only change if you run your own clusterizer task
-  Float_t timeMin       = 100e-9,  //minimum time of physical signal in a cell/digit (s)
-  Float_t timeMax       = 900e-9,  //maximum time of physical signal in a cell/digit (s)
-  Float_t timeCut       = 900e-9,  //maximum time difference between the digits inside EMC cluster (s)
-  const char *pass      = 0,       //string defining pass (use none if figured out from path)
-  Bool_t  remapMcAod    = kFALSE,  //switch on the remaping for the MC labels in AOD productions,
-  TString cdbStorage    = "raw://" // "local://"
+  Bool_t distBC             = kTRUE,    // distance to bad channel
+  Bool_t recalibClus        = kTRUE,    // recalibrate cluster energy
+  Bool_t recalcClusPos      = kTRUE,    // recalculate cluster position
+  Bool_t nonLinearCorr      = kTRUE,    // apply non-linearity
+  Bool_t remExoticCell      = kTRUE,    // remove exotic cells
+  Bool_t remExoticClus      = kTRUE,    // remove exotic clusters
+  Bool_t fidRegion          = kFALSE,   // apply fiducial cuts
+  Bool_t calibEnergy        = kTRUE,    // calibrate energy
+  Bool_t calibTime          = kTRUE,    // calibrate timing
+  Bool_t remBC              = kTRUE,    // remove bad channels
+  UInt_t nonLinFunct        = AliEMCALRecoUtils::kBeamTestCorrected,
+  Bool_t reclusterize       = kTRUE,    // reclusterize
+  Float_t seedthresh        = 0.100,    // seed threshold
+  Float_t cellthresh        = 0.050,    // cell threshold
+  UInt_t clusterizer        = AliEMCALRecParam::kClusterizerv2,
+  Bool_t trackMatch         = kTRUE,    // track matching
+  Bool_t updateCellOnly     = kFALSE,   // only change if you run your own clusterizer task
+  Float_t timeMin           = 100e-9,   // minimum time of physical signal in a cell/digit (s)
+  Float_t timeMax           = 900e-9,   // maximum time of physical signal in a cell/digit (s)
+  Float_t timeCut           = 900e-9,   // maximum time difference between the digits inside EMC cluster (s)
+  const char *pass          = 0,        // string defining pass (use none if figured out from path)
+  Bool_t  remapMcAod        = kFALSE,   // switch on the remaping for the MC labels in AOD productions,
+  TString cdbStorage        = "raw://", // "local://"
+  Float_t diffEAggregation  = 0.        // difference E in aggregation of cells (i.e. stop aggregation if E_{new} > E_{prev} + diffEAggregation)
 ) 
 {
   // Get the pointer to the existing analysis manager via the static access method.
@@ -43,52 +44,52 @@ AliAnalysisTaskSE *AddTaskEMCALTender(
   AliAnalysisTaskSE *ana = 0;
   AliAnalysisDataContainer *coutput1 = 0;
 
-#ifdef __CLING__
-  // ROOT6 version of the Config macro. JIT cannot handle load and execute macro (compiler error) - need to call via gROOT->ProcessLine(...)
-  std::stringstream configbuilder;
-  configbuilder << ".x " << gSystem->Getenv("ALICE_PHYSICS") << "/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C(";
-  configbuilder << (distBC ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (recalibClus ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (recalcClusPos ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (nonLinearCorr ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (remExoticCell ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (remExoticClus ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (fidRegion ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (calibEnergy ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (calibTime ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << (remBC ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << nonLinFunct << ", ";
-  configbuilder << (reclusterize ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << seedthresh << ", ";
-  configbuilder << cellthresh << ", ";
-  configbuilder << clusterizer << ", ";
-  configbuilder << trackMatch << ", ";
-  configbuilder << (updateCellOnly ? "kTRUE" : "kFALSE") << ", ";
-  configbuilder << timeMin << ", ";
-  configbuilder << timeMax << ", ";
-  configbuilder << timeCut;
-  configbuilder << ")";
-  std::string configbuilderstring = configbuilder.str();
-  std::cout << "Running config macro " << configbuilderstring << std::endl;
-  AliEMCALTenderSupply *EMCALSupply = (AliEMCALTenderSupply *)gROOT->ProcessLine(configbuilderstring.c_str());
-#else
-  // ROOT5 version, allows loading a macro
-  gROOT->LoadMacro("$ALICE_PHYSICS/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C");
+  #ifdef __CLING__
+    // ROOT6 version of the Config macro. JIT cannot handle load and execute macro (compiler error) - need to call via gROOT->ProcessLine(...)
+    std::stringstream configbuilder;
+    configbuilder << ".x " << gSystem->Getenv("ALICE_PHYSICS") << "/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C(";
+    configbuilder << (distBC ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (recalibClus ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (recalcClusPos ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (nonLinearCorr ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (remExoticCell ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (remExoticClus ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (fidRegion ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (calibEnergy ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (calibTime ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << (remBC ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << nonLinFunct << ", ";
+    configbuilder << (reclusterize ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << seedthresh << ", ";
+    configbuilder << cellthresh << ", ";
+    configbuilder << clusterizer << ", ";
+    configbuilder << trackMatch << ", ";
+    configbuilder << (updateCellOnly ? "kTRUE" : "kFALSE") << ", ";
+    configbuilder << timeMin << ", ";
+    configbuilder << timeMax << ", ";
+    configbuilder << timeCut;
+    configbuilder << ")";
+    std::string configbuilderstring = configbuilder.str();
+    std::cout << "Running config macro " << configbuilderstring << std::endl;
+    AliEMCALTenderSupply *EMCALSupply = (AliEMCALTenderSupply *)gROOT->ProcessLine(configbuilderstring.c_str());
+  #else
+    // ROOT5 version, allows loading a macro
+    gROOT->LoadMacro("$ALICE_PHYSICS/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C");
 
-  AliEMCALTenderSupply *EMCALSupply = ConfigEmcalTenderSupply(distBC, recalibClus, recalcClusPos, nonLinearCorr, remExoticCell, remExoticClus, 
-							      fidRegion, calibEnergy, calibTime, remBC, nonLinFunct, reclusterize, seedthresh, 
-							      cellthresh, clusterizer, trackMatch, updateCellOnly, timeMin, timeMax, timeCut);
-#endif
+    AliEMCALTenderSupply *EMCALSupply = ConfigEmcalTenderSupply(distBC, recalibClus, recalcClusPos, nonLinearCorr, remExoticCell, remExoticClus, 
+                      fidRegion, calibEnergy, calibTime, remBC, nonLinFunct, reclusterize, seedthresh, 
+                      cellthresh, clusterizer, trackMatch, updateCellOnly, timeMin, timeMax, timeCut, diffEAggregation);
+  #endif
 
   if (pass) 
     EMCALSupply->SetPass(pass);
 
   if (evhand->InheritsFrom("AliESDInputHandler")) {
-#ifdef __CLING__
-    AliTender* alitender = dynamic_cast<AliTender *>(mgr->GetTopTasks()->FindObject("AliTender"));
-#else
-    AliTender* alitender = (AliTender *)mgr->GetTopTasks()->FindObject("AliTender");
-#endif
+    #ifdef __CLING__
+        AliTender* alitender = dynamic_cast<AliTender *>(mgr->GetTopTasks()->FindObject("AliTender"));
+    #else
+        AliTender* alitender = (AliTender *)mgr->GetTopTasks()->FindObject("AliTender");
+    #endif
     if (!alitender)
       alitender = new  AliTender("AliTender");
     
@@ -98,16 +99,16 @@ AliAnalysisTaskSE *AddTaskEMCALTender(
     ana = alitender;
     
     coutput1 = mgr->CreateContainer("emcal_tender_event", 
-				    AliESDEvent::Class(), 
-				    AliAnalysisManager::kExchangeContainer, 
-				    "default_tender");
+                                      AliESDEvent::Class(), 
+                                      AliAnalysisManager::kExchangeContainer, 
+                                      "default_tender");
   } else if (evhand->InheritsFrom("AliAODInputHandler")) {
-#ifdef __CLING__
-    AliEmcalTenderTask* emcaltender = dynamic_cast<AliEmcalTenderTask *>(mgr->GetTopTasks()->FindObject("AliEmcalTenderTask"));
-#else
-    AliEmcalTenderTask* emcaltender = (AliEmcalTenderTask *)mgr->GetTopTasks()->FindObject("AliEmcalTenderTask");
-#endif
-    
+    #ifdef __CLING__
+        AliEmcalTenderTask* emcaltender = dynamic_cast<AliEmcalTenderTask *>(mgr->GetTopTasks()->FindObject("AliEmcalTenderTask"));
+    #else
+        AliEmcalTenderTask* emcaltender = (AliEmcalTenderTask *)mgr->GetTopTasks()->FindObject("AliEmcalTenderTask");
+    #endif
+      
     if (!emcaltender)
         emcaltender = new  AliEmcalTenderTask("AliEmcalTenderTask");
     
@@ -118,10 +119,10 @@ AliAnalysisTaskSE *AddTaskEMCALTender(
     
     ana = emcaltender;
     
-    coutput1 = mgr->CreateContainer("emcal_tender_event",
-				    AliAODEvent::Class(), 
-				    AliAnalysisManager::kExchangeContainer, 
-				    "default_tender");
+    coutput1 = mgr->CreateContainer(  "emcal_tender_event",
+                                      AliAODEvent::Class(), 
+                                      AliAnalysisManager::kExchangeContainer, 
+                                      "default_tender");
   } else {
     ::Error("AddTaskEMCALTender", "Input event handler not recognized, AOD/ESD expected. Returning...");
     return NULL;
diff --git a/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C b/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C
index 24a2675..2f6c05b 100644
--- a/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C
+++ b/PWG/EMCAL/macros/ConfigEmcalTenderSupply.C
@@ -1,26 +1,27 @@
 // $Id$
 
 AliEMCALTenderSupply* ConfigEmcalTenderSupply(
-  const Bool_t distBC         = kFALSE,  //distance to bad channel
-  const Bool_t recalibClus    = kFALSE,  //recalibrate cluster energy
-  const Bool_t recalcClusPos  = kFALSE,  //recalculate cluster position
-  const Bool_t nonLinearCorr  = kFALSE,  //apply non-linearity
-  const Bool_t remExoticCell  = kFALSE,  //remove exotic cells
-  const Bool_t remExoticClus  = kTRUE,   //remove exotic clusters
-  const Bool_t fidRegion      = kFALSE,  //apply fiducial cuts
-  const Bool_t calibEnergy    = kFALSE,  //calibrate energy
-  const Bool_t calibTime      = kFALSE,  //calibrate timing
-  const Bool_t remBC          = kFALSE,  //remove bad channels
-  const UInt_t nonLinFunct    = AliEMCALRecoUtils::kNoCorrection,
-  const Bool_t reclusterize   = kTRUE,   //reclusterize
-  const Float_t seedthresh    = 0.100,   //seed threshold
-  const Float_t cellthresh    = 0.050,   //cell threshold
-  const UInt_t clusterizer    = AliEMCALRecParam::kClusterizerv1,
-  const Bool_t trackMatch     = kTRUE,   //track matching
-  const Bool_t updateCellOnly = kFALSE,  //only change if you run your own clusterizer task
-  const Float_t timeMin       = -1,      //minimum time of physical signal in a cell/digit (s)
-  const Float_t timeMax       = +1,      //maximum time of physical signal in a cell/digit (s)
-  const Float_t timeCut       =  1       //maximum time difference between the digits inside EMC cluster (s)
+  const Bool_t distBC             = kFALSE,     // distance to bad channel
+  const Bool_t recalibClus        = kFALSE,     // recalibrate cluster energy
+  const Bool_t recalcClusPos      = kFALSE,     // recalculate cluster position
+  const Bool_t nonLinearCorr      = kFALSE,     // apply non-linearity
+  const Bool_t remExoticCell      = kFALSE,     // remove exotic cells
+  const Bool_t remExoticClus      = kTRUE,      // remove exotic clusters
+  const Bool_t fidRegion          = kFALSE,     // apply fiducial cuts
+  const Bool_t calibEnergy        = kFALSE,     // calibrate energy
+  const Bool_t calibTime          = kFALSE,     // calibrate timing
+  const Bool_t remBC              = kFALSE,     // remove bad channels
+  const UInt_t nonLinFunct        = AliEMCALRecoUtils::kNoCorrection,
+  const Bool_t reclusterize       = kTRUE,      // reclusterize
+  const Float_t seedthresh        = 0.100,      // seed threshold
+  const Float_t cellthresh        = 0.050,      // cell threshold
+  const UInt_t clusterizer        = AliEMCALRecParam::kClusterizerv1,
+  const Bool_t trackMatch         = kTRUE,      // track matching
+  const Bool_t updateCellOnly     = kFALSE,     // only change if you run your own clusterizer task
+  const Float_t timeMin           = -1,         // minimum time of physical signal in a cell/digit (s)
+  const Float_t timeMax           = +1,         // maximum time of physical signal in a cell/digit (s)
+  const Float_t timeCut           =  1,         // maximum time difference between the digits inside EMC cluster (s)
+  const Float_t diffEAggregation  =  0.         // difference E in aggregation of cells (i.e. stop aggregation if E_{new} > E_{prev} + diffEAggregation)
 )
 {
   AliEMCALTenderSupply *EMCALSupply = new AliEMCALTenderSupply("EMCALtender");  
@@ -38,6 +39,7 @@ AliEMCALTenderSupply* ConfigEmcalTenderSupply(
   params->SetTimeMin(timeMin);
   params->SetTimeMax(timeMax);
   params->SetTimeCut(timeCut);
+  params->SetLocMaxCut(diffEAggregation); // Set minimum energy difference to start new cluster
 
   EMCALSupply->SetRecParam(params);
 
diff --git a/TENDER/TenderSupplies/AliEMCALTenderSupply.cxx b/TENDER/TenderSupplies/AliEMCALTenderSupply.cxx
index 1b48bbd..ec5f0b9 100644
--- a/TENDER/TenderSupplies/AliEMCALTenderSupply.cxx
+++ b/TENDER/TenderSupplies/AliEMCALTenderSupply.cxx
@@ -1546,7 +1546,7 @@ Bool_t AliEMCALTenderSupply::InitClusterization()
 
   if (!event) 
     return kFALSE;
-  
+
   if (fDebugLevel>0) 
     AliInfo(Form("Initialising reclustering parameters: Clusterizer type: %d",fRecParam->GetClusterizerFlag()));
   
-- 
1.9.1

