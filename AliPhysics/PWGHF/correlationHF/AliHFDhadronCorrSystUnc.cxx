/**************************************************************************
 * Copyright(c) 1998-2009, ALICE Experiment at CERN, All rights reserved. *
 *                                                                        *
 * Author: The ALICE Off-line Project.                                    *
 * Contributors are mentioned in the code where appropriate.              *
 *                                                                        *
 * Permission to use, copy, modify and distribute this software and its   *
 * documentation strictly for non-commercial purposes is hereby granted   *
 * without fee, provided that the above copyright notice appears in all   *
 * copies and that both the copyright notice and this permission notice   *
 * appear in the supporting documentation. The authors make no claims     *
 * about the suitability of this software for any purpose. It is          *
 * provided "as is" without express or implied warranty.                  *
 **************************************************************************/


/* $Id: $ */

/////////////////////////////////////////////////////////////
// class for systematic uncertainties on D meson -hadron correlation distribution
//
// Author: A. Rossi, andrea.rossi@cern.ch
//
// Responsible of the values set for the different mesons/datasets
//      D0:  in pp (2010 min bias) Fabio Colamaria, fabio.colamaria@ba.infn.it ;  p-Pb (2013 min bias): Fabio Colamaria, fabio.colamaria@ba.infn.it,  Somnath Kar, somnath.kar@cern.ch
//      D*+: in pp 2010 min. bias and p-Pb 2013 min. bias  Sandro Bjelogrlic, sandro.bjelogrlic@cern.ch
//      D+:  in pp 2010 min. bias and p-Pb 2013 min. bias  Jitendra Kumar, jitendra.kumar@cern.ch
//
/////////////////////////////////////////////////////////////
#include <Riostream.h>
#include "AliHFDhadronCorrSystUnc.h"
#include <TMath.h>
#include <TH1D.h>
#include <TH2D.h>
#include <TCanvas.h>
#include <TGraphAsymmErrors.h>
#include <TNamed.h>
#include "AliHFCorrelationUtils.h"

using std::cout;
using std::endl;

ClassImp(AliHFDhadronCorrSystUnc)

AliHFDhadronCorrSystUnc::AliHFDhadronCorrSystUnc() : TNamed(), 
  fmeson(),
  fstrmeson(),
  fstrptAss(),
  fstrptD(),
  fhDeltaPhiTemplate(),
  fhYieldExtraction(),
  fhBackSubtractionMin(),
  fhBackSubtractionMax(),
  fhBeautyFDmin(),
  fhBeautyFDmax(),
  fhMCclosureTestMin(),
  fhMCclosureTestMax(),
  fhMCcorrectionsMin(),
  fhMCcorrectionsMax(),
  fhMCDefficiencyMin(),
  fhMCDefficiencyMax(),
  fhSecContaminationMin(),
  fhSecContaminationMax(),
  fhTotalMin(),
  fhTotalMax(),
  fhTotalNonFDMin(),
  fhTotalNonFDMax(),
  fhTotalNonFlatDPhiMin(),
  fhTotalNonFlatDPhiMax(),
  fhtotFlatMin(),
  fhtotFlatMax(),
  fgrYieldUnc(),         
  fgrBackSubUnc(),
  fgrMCcorrections(),   
  fgrMCDefficiency(),   
  fgrSecContamination(),   
  fgrMCclosureTest(),  
  fgrBeautyFD(),
  fgrYieldUncRel(),         
  fgrBackSubUncRel(),
  fgrMCcorrectionsRel(),   
  fgrMCDefficiencyRel(),   
  fgrSecContaminationRel(),   
  fgrMCclosureTestRel(),  
  fgrBeautyFDRel(),
  fgrTotal(),
  fgrTotalRel(),
  fgrTotalNonFD(),
  fgrTotalNonFlatDPhi(),
  fgrTotalNonFlatDPhiRel(),
  fgrTotalFlatDPhi(),
  fgrTotalFlatDPhiRel()
        
{
  // default constructor
}


AliHFDhadronCorrSystUnc::AliHFDhadronCorrSystUnc(const char* name) : 
  TNamed(name,name), 						   
  fmeson(),
  fstrmeson(),
  fstrptAss(),
  fstrptD(),
  fhDeltaPhiTemplate(),
  fhYieldExtraction(),
  fhBackSubtractionMin(),
  fhBackSubtractionMax(),
  fhBeautyFDmin(),
  fhBeautyFDmax(),
  fhMCclosureTestMin(),
  fhMCclosureTestMax(),
  fhMCcorrectionsMin(),
  fhMCcorrectionsMax(),
  fhMCDefficiencyMin(),
  fhMCDefficiencyMax(),
  fhSecContaminationMin(),
  fhSecContaminationMax(),
  fhTotalMin(),
  fhTotalMax(),
  fhTotalNonFDMin(),
  fhTotalNonFDMax(),
  fhTotalNonFlatDPhiMin(),
  fhTotalNonFlatDPhiMax(),
  fhtotFlatMin(),
  fhtotFlatMax(),
  fgrYieldUnc(),         
  fgrBackSubUnc(),
  fgrMCcorrections(),   
  fgrMCDefficiency(),   
  fgrSecContamination(),   
  fgrMCclosureTest(),  
  fgrBeautyFD(),
  fgrYieldUncRel(),         
  fgrBackSubUncRel(),
  fgrMCcorrectionsRel(),   
  fgrMCDefficiencyRel(),   
  fgrSecContaminationRel(),   
  fgrMCclosureTestRel(),  
  fgrBeautyFDRel(),
  fgrTotal(),
  fgrTotalRel(),
  fgrTotalNonFD(),
  fgrTotalNonFlatDPhi(),
  fgrTotalNonFlatDPhiRel(),
  fgrTotalFlatDPhi(),
  fgrTotalFlatDPhiRel()
{
  // default constructor
}



AliHFDhadronCorrSystUnc::~AliHFDhadronCorrSystUnc(){
  // destructor
  
  delete fhDeltaPhiTemplate;
  delete fhYieldExtraction;
  delete fhBackSubtractionMin;
  delete   fhBackSubtractionMax;
  delete  fhBeautyFDmin;
  delete  fhBeautyFDmax;
  delete  fhMCclosureTestMin;
  delete  fhMCclosureTestMax;
  delete  fhMCcorrectionsMin;
  delete  fhMCcorrectionsMax;
  delete  fhMCDefficiencyMin;
  delete  fhMCDefficiencyMax;
  delete  fhSecContaminationMin;
  delete  fhSecContaminationMax;
  delete  fhTotalMin;
  delete fhTotalMax;
  delete fhTotalNonFDMin;
  delete fhTotalNonFDMax;
  delete fhTotalNonFlatDPhiMin;
  delete fhTotalNonFlatDPhiMax;
  delete fhtotFlatMin;
  delete fhtotFlatMax;
  delete fgrYieldUnc;
  delete fgrBackSubUnc;
  delete fgrMCcorrections;
  delete fgrMCDefficiency;
  delete fgrSecContamination;
  delete fgrMCclosureTest;  
  delete fgrBeautyFD;   
  delete fgrYieldUncRel;
  delete fgrBackSubUncRel;
  delete fgrMCcorrectionsRel;
  delete fgrMCDefficiencyRel;
  delete fgrSecContaminationRel;
  delete fgrMCclosureTestRel;  
  delete fgrBeautyFDRel;   
  delete fgrTotal;
  delete fgrTotalRel;
  delete fgrTotalNonFD;
  delete fgrTotalNonFlatDPhi;
  delete fgrTotalNonFlatDPhiRel;
  delete fgrTotalFlatDPhi;
  delete fgrTotalFlatDPhiRel;

}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroLowPtAss03(){ 
  Printf("Loading syst unc for D0 pp2010 3-5 0.3 thr");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroMidPtAss03(){ 
  Printf("Loading syst unc for D0 pp2010 5-8 0.3 thr");

  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroHighPtAss03(){ 

  Printf("Loading syst unc for D0 pp2010 8-16 0.3 thr");
  
  fmeson=AliHFCorrelationUtils::kDzero;;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}




//--------------------------------------------------
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarLowPtAss03(){
  Printf("Loading syst unc for D*+ pp 2010, 3<pt(D)<5 GeV/c, pt(assoc)>0.3");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS, -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarMidPtAss03(){
  Printf("Loading syst unc for D*+ pp 2010, 5<pt(D)<8 GeV/c, pt(assoc)>0.3");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS/ -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



void AliHFDhadronCorrSystUnc::InitEmptyHistosFromTemplate(){
  if(!fhDeltaPhiTemplate){
    Printf("Template histo not set, using standard binning");
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
   fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
   fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
   fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
   fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
   fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
   fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
   fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
   fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
   fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
   fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
   fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
   fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
   fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
}




void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarHighPtAss03(){
  Printf("Loading syst unc for D*+ pp 2010, 8<pt(D)<16 GeV/c, pt(assoc)>0.3");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS   -5% +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }
  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}


void AliHFDhadronCorrSystUnc::SetHistoTemplate(TH1D *h,TString strname,Bool_t clone){
  if(fhDeltaPhiTemplate)delete fhDeltaPhiTemplate;
  if(!clone){
    fhDeltaPhiTemplate=h;
  }
  else{
    if(strname.IsNull()){fhDeltaPhiTemplate=(TH1D*)h->Clone("fhDeltaPhiTemplate");
    }
    else fhDeltaPhiTemplate=(TH1D*)h->Clone(strname.Data());
  }
}


void AliHFDhadronCorrSystUnc::SetHistoYieldExtraction(TH1D *h,TString strname,Bool_t clone){
  if(fhYieldExtraction)delete fhYieldExtraction;
  if(!clone){
    fhYieldExtraction=h;
  }
  else{
    if(strname.IsNull()){fhYieldExtraction=(TH1D*)h->Clone("fhYieldExtraction");
    }
    else fhYieldExtraction=(TH1D*)h->Clone(strname.Data());
  }
}

void AliHFDhadronCorrSystUnc::SetHistoBackSubtraction(TH1D *hMax,TString strname,Bool_t clone,TH1D *hMin){
  if(!hMax){
    Printf("No Input Histo for back uncertainty");
    return;
  }
  if(fhBackSubtractionMax)delete fhBackSubtractionMax;
  if(!clone){
    fhBackSubtractionMax=hMax;
  }
  else{
    if(strname.IsNull()){fhBackSubtractionMax=(TH1D*)hMax->Clone("fhBackSubtractionMax");
    }
    else fhBackSubtractionMax=(TH1D*)hMax->Clone(strname.Data());
  }
  
  if(fhBackSubtractionMin)delete fhBackSubtractionMin;
  if(hMin){
    if(!clone){
      fhBackSubtractionMin=hMin;
    }
    else{
      if(strname.IsNull()){fhBackSubtractionMin=(TH1D*)hMin->Clone("fhBackSubtractionMin");
      }
      else fhBackSubtractionMin=(TH1D*)hMin->Clone(strname.Data());
    }
  }
  else{
    if(strname.IsNull()){
      fhBackSubtractionMin=(TH1D*)hMin->Clone("fhBackSubtractionMin");
    }
    else fhBackSubtractionMin=(TH1D*)hMin->Clone(strname.Data());
    for(Int_t k=0;k<=fhBackSubtractionMin->GetNbinsX();k++){
      fhBackSubtractionMin->SetBinContent(k,-1.*fhBackSubtractionMin->GetBinContent(k));
    }
  }

  


}


void AliHFDhadronCorrSystUnc::SetHistoMCclosureTestMax(TH1D *h,TString strname,Bool_t clone){
  if(fhMCclosureTestMax)delete fhMCclosureTestMax;
  if(!clone){
    fhMCclosureTestMax=h;
  }
  else{
    if(strname.IsNull()){fhMCclosureTestMax=(TH1D*)h->Clone("fhMCclosureTestMax");
    }
    else fhMCclosureTestMax=(TH1D*)h->Clone(strname.Data());
  }
}

void AliHFDhadronCorrSystUnc::SetHistoMCclosureTestMin(TH1D *h,TString strname,Bool_t clone){
    if(fhMCclosureTestMin)delete fhMCclosureTestMin;
    if(!clone){
      fhMCclosureTestMin=h;
    }
    else{
      if(strname.IsNull()){fhMCclosureTestMin=(TH1D*)h->Clone("fhMCclosureTestMin");
      }
      else fhMCclosureTestMin=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoMCcorrectionsMin(TH1D *h,TString strname,Bool_t clone){
    if(fhMCcorrectionsMin)delete fhMCcorrectionsMin;
    if(!clone){
      fhMCcorrectionsMin=h;
    }
    else{
      if(strname.IsNull()){fhMCcorrectionsMin=(TH1D*)h->Clone("fhMCcorrectionsMin");
      }
      else fhMCcorrectionsMin=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoMCcorrectionsMax(TH1D *h,TString strname,Bool_t clone){
    if(fhMCcorrectionsMax)delete fhMCcorrectionsMax;
    if(!clone){
      fhMCcorrectionsMax=h;
    }
    else{
      if(strname.IsNull()){fhMCcorrectionsMax=(TH1D*)h->Clone("fhMCcorrectionsMax");
      }
      else fhMCcorrectionsMax=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoMCDefficiencyMin(TH1D *h,TString strname,Bool_t clone){
    if(fhMCDefficiencyMin)delete fhMCDefficiencyMin;
    if(!clone){
      fhMCDefficiencyMin=h;
    }
    else{
      if(strname.IsNull()){fhMCDefficiencyMin=(TH1D*)h->Clone("fhMCDefficiencyMin");
      }
      else fhMCDefficiencyMin=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoMCDefficiencyMax(TH1D *h,TString strname,Bool_t clone){
    if(fhMCDefficiencyMax)delete fhMCDefficiencyMax;
    if(!clone){
      fhMCDefficiencyMax=h;
    }
    else{
      if(strname.IsNull()){fhMCDefficiencyMax=(TH1D*)h->Clone("fhMCDefficiencyMax");
      }
      else fhMCDefficiencyMax=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoSecContaminationMin(TH1D *h,TString strname,Bool_t clone){
    if(fhSecContaminationMin)delete fhSecContaminationMin;
    if(!clone){
      fhSecContaminationMin=h;
    }
    else{
      if(strname.IsNull()){fhSecContaminationMin=(TH1D*)h->Clone("fhSecContaminationMin");
      }
      else fhSecContaminationMin=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoSecContaminationMax(TH1D *h,TString strname,Bool_t clone){
    if(fhSecContaminationMax)delete fhSecContaminationMax;
    if(!clone){
      fhSecContaminationMax=h;
    }
    else{
      if(strname.IsNull()){fhSecContaminationMax=(TH1D*)h->Clone("fhSecContaminationMax");
      }
      else fhSecContaminationMax=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoBeautyFDmin(TH1D *h,TString strname,Bool_t clone){
    if(fhBeautyFDmin)delete fhBeautyFDmin;
    if(!clone){
      fhBeautyFDmin=h;
    }
    else{
      if(strname.IsNull()){fhBeautyFDmin=(TH1D*)h->Clone("fhBeautyFDmin");
      }
      else fhBeautyFDmin=(TH1D*)h->Clone(strname.Data());
    }
}


void AliHFDhadronCorrSystUnc::SetHistoBeautyFDmax(TH1D *h,TString strname,Bool_t clone){
    if(fhBeautyFDmax)delete fhBeautyFDmax;
    if(!clone){
      fhBeautyFDmax=h;
    }
    else{
      if(strname.IsNull()){fhBeautyFDmax=(TH1D*)h->Clone("fhBeautyFDmax");
      }
      else fhBeautyFDmax=(TH1D*)h->Clone(strname.Data());
    }
}





void AliHFDhadronCorrSystUnc::BuildTotalUncHisto(){
  if(fhTotalMin)delete fhTotalMin;
  if(fhTotalMax)delete fhTotalMax;
printf("histo %p",fhDeltaPhiTemplate);
  fhTotalMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhTotalMin");
  fhTotalMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhTotalMax");
  Double_t errMin,errMax;

  for(Int_t j=1;j<=fhTotalMin->GetNbinsX();j++){
    errMin=fhMCclosureTestMin->GetBinContent(j)*fhMCclosureTestMin->GetBinContent(j);    
    errMin+=fhMCcorrectionsMin->GetBinContent(j)*fhMCcorrectionsMin->GetBinContent(j);
    errMin+=fhMCDefficiencyMin->GetBinContent(j)*fhMCDefficiencyMin->GetBinContent(j);
    errMin+=fhSecContaminationMin->GetBinContent(j)*fhSecContaminationMin->GetBinContent(j);
    errMin+=fhYieldExtraction->GetBinContent(j)*fhYieldExtraction->GetBinContent(j);
    errMin+=fhBackSubtractionMin->GetBinContent(j)*fhBackSubtractionMin->GetBinContent(j);
    errMin+=fhBeautyFDmin->GetBinContent(j)*fhBeautyFDmin->GetBinContent(j);
    
    fhTotalMin->SetBinContent(j,-TMath::Sqrt(errMin));

    errMax=fhMCclosureTestMax->GetBinContent(j)*fhMCclosureTestMax->GetBinContent(j);    
    errMax+=fhMCcorrectionsMax->GetBinContent(j)*fhMCcorrectionsMax->GetBinContent(j);
    errMax+=fhMCDefficiencyMax->GetBinContent(j)*fhMCDefficiencyMax->GetBinContent(j);
    errMax+=fhSecContaminationMax->GetBinContent(j)*fhSecContaminationMax->GetBinContent(j);
    errMax+=fhYieldExtraction->GetBinContent(j)*fhYieldExtraction->GetBinContent(j);
    errMax+=fhBackSubtractionMax->GetBinContent(j)*fhBackSubtractionMax->GetBinContent(j);
    errMax+=fhBeautyFDmax->GetBinContent(j)*fhBeautyFDmax->GetBinContent(j);
    
    fhTotalMax->SetBinContent(j,TMath::Sqrt(errMax));
    
    
  }

  fhTotalMin->SetLineColor(kBlack);
  fhTotalMin->SetLineWidth(2);
  fhTotalMin->SetFillStyle(0);
  fhTotalMin->SetFillColor(kBlack);
  fhTotalMin->SetMarkerColor(kBlack);
  fhTotalMin->SetMarkerStyle(20);

  fhTotalMax->SetLineColor(kBlack);
  fhTotalMax->SetLineWidth(2);
  fhTotalMax->SetFillStyle(0);
  fhTotalMax->SetFillColor(kBlack);
  fhTotalMax->SetMarkerColor(kBlack);
  fhTotalMax->SetMarkerStyle(20);
  
}

void AliHFDhadronCorrSystUnc::BuildTotalNonFlatUncHisto(){
  if(fhTotalNonFlatDPhiMin)delete fhTotalNonFlatDPhiMin;
  if(fhTotalNonFlatDPhiMax)delete fhTotalNonFlatDPhiMax;

  fhTotalNonFlatDPhiMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhTotalNonFlatDPhiMin");
  fhTotalNonFlatDPhiMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhTotalNonFlatDPhiMax");
  Double_t errMin,errMax,mcClosureMinmax,mcClosureMaxmin;

  mcClosureMinmax=fhMCclosureTestMin->GetBinContent(fhMCclosureTestMin->GetMaximumBin());
  mcClosureMaxmin=fhMCclosureTestMax->GetBinContent(fhMCclosureTestMax->GetMinimumBin());
  Printf("MC closure - The max of min is: %f, the min of max is: %f", mcClosureMinmax, mcClosureMaxmin);

  for(Int_t j=1;j<=fhTotalNonFlatDPhiMin->GetNbinsX();j++){
    errMin=(fhMCclosureTestMin->GetBinContent(j)*fhMCclosureTestMin->GetBinContent(j)-mcClosureMinmax*mcClosureMinmax);// Forced to this quadrature subtraction, doing: (fhMCclosureTestMin->GetBinContent(j)-mcClosureMinmax)*(fhMCclosureTestMin->GetBinContent(j)-mcClosureMinmax) gives the wrong result.. of course  

    errMin+=fhBeautyFDmin->GetBinContent(j)*fhBeautyFDmin->GetBinContent(j);
    
    fhTotalNonFlatDPhiMin->SetBinContent(j,-TMath::Sqrt(errMin));

    errMax=fhMCclosureTestMax->GetBinContent(j)*fhMCclosureTestMax->GetBinContent(j)-mcClosureMaxmin*mcClosureMaxmin; // Forced to this quadrature subtraction, doing:(fhMCclosureTestMax->GetBinContent(j)-mcClosureMaxmin)*(fhMCclosureTestMax->GetBinContent(j)-mcClosureMaxmin) gives the wrong result.. of course  
   
    errMax+=fhBeautyFDmax->GetBinContent(j)*fhBeautyFDmax->GetBinContent(j);
    
    fhTotalNonFlatDPhiMax->SetBinContent(j,TMath::Sqrt(errMax));
    
    
  }

  fhtotFlatMin=(TH1D*)fhTotalMin->Clone("hTotFlatDPhiMin");
  fhtotFlatMin->SetTitle("#Delta#phi indipendent");

  fhtotFlatMax=(TH1D*)fhTotalMax->Clone("hTotFlatDPhiMax");
  fhtotFlatMax->SetTitle("#Delta#phi indipendent");

  for(Int_t jfl=1;jfl<=fhtotFlatMin->GetNbinsX();jfl++){
    fhtotFlatMin->SetBinContent(jfl,-TMath::Sqrt(fhTotalMin->GetBinContent(jfl)*fhTotalMin->GetBinContent(jfl)-fhTotalNonFlatDPhiMin->GetBinContent(jfl)*fhTotalNonFlatDPhiMin->GetBinContent(jfl)));
    fhtotFlatMax->SetBinContent(jfl,TMath::Sqrt(fhTotalMax->GetBinContent(jfl)*fhTotalMax->GetBinContent(jfl)-fhTotalNonFlatDPhiMax->GetBinContent(jfl)*fhTotalNonFlatDPhiMax->GetBinContent(jfl)));
  }

  fhtotFlatMin->SetLineStyle(2);
  fhtotFlatMax->SetLineStyle(2);




  fhTotalNonFlatDPhiMin->SetLineColor(kBlue);
  fhTotalNonFlatDPhiMin->SetLineWidth(2);
  fhTotalNonFlatDPhiMin->SetFillStyle(0);
  fhTotalNonFlatDPhiMin->SetFillColor(kBlue);
  fhTotalNonFlatDPhiMin->SetMarkerColor(kBlue);
  fhTotalNonFlatDPhiMin->SetMarkerStyle(20);

  fhTotalNonFlatDPhiMax->SetLineColor(kBlue);
  fhTotalNonFlatDPhiMax->SetLineWidth(2);
  fhTotalNonFlatDPhiMax->SetFillStyle(0);
  fhTotalNonFlatDPhiMax->SetFillColor(kBlue);
  fhTotalNonFlatDPhiMax->SetMarkerColor(kBlue);
  fhTotalNonFlatDPhiMax->SetMarkerStyle(20);
  
}


void AliHFDhadronCorrSystUnc::BuildTotalNonFDUncHisto(){
  if(fhTotalNonFDMin)delete fhTotalNonFDMin;
  if(fhTotalNonFDMax)delete fhTotalNonFDMax;

  fhTotalNonFDMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhTotalNonFDMin");
  fhTotalNonFDMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhTotalNonFDMax");
  Double_t errMin,errMax;

  for(Int_t j=1;j<=fhTotalNonFDMin->GetNbinsX();j++){
    errMin=fhMCclosureTestMin->GetBinContent(j)*fhMCclosureTestMin->GetBinContent(j);    
    errMin+=fhMCcorrectionsMin->GetBinContent(j)*fhMCcorrectionsMin->GetBinContent(j);
    errMin+=fhMCDefficiencyMin->GetBinContent(j)*fhMCDefficiencyMin->GetBinContent(j);
    errMin+=fhSecContaminationMin->GetBinContent(j)*fhSecContaminationMin->GetBinContent(j);
    errMin+=fhYieldExtraction->GetBinContent(j)*fhYieldExtraction->GetBinContent(j);
    errMin+=fhBackSubtractionMin->GetBinContent(j)*fhBackSubtractionMin->GetBinContent(j);

    fhTotalNonFDMin->SetBinContent(j,-TMath::Sqrt(errMin));

    errMax=fhMCclosureTestMax->GetBinContent(j)*fhMCclosureTestMax->GetBinContent(j);    
    errMax+=fhMCcorrectionsMax->GetBinContent(j)*fhMCcorrectionsMax->GetBinContent(j);
    errMax+=fhMCDefficiencyMax->GetBinContent(j)*fhMCDefficiencyMax->GetBinContent(j);
    errMax+=fhSecContaminationMax->GetBinContent(j)*fhSecContaminationMax->GetBinContent(j);
    errMax+=fhYieldExtraction->GetBinContent(j)*fhYieldExtraction->GetBinContent(j);
    errMax+=fhBackSubtractionMax->GetBinContent(j)*fhBackSubtractionMax->GetBinContent(j);
    
    fhTotalNonFDMax->SetBinContent(j,TMath::Sqrt(errMax));
    
    
  }

}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010(Int_t meson,Double_t ptD,Double_t minptAss, Double_t maxptAss){
  
  if(meson==AliHFCorrelationUtils::kDzero){
    
    // 0.3 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<5){
	InitStandardUncertaintiesPP2010DzeroLowPtAss03();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DzeroMidPtAss03();        
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DzeroHighPtAss03();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }     
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DzeroLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DzeroMidPtAss03to1();               
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DzeroHighPtAss03to1();
      }      
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }       
    // 1 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DzeroLowPtAss1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DzeroMidPtAss1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DzeroHighPtAss1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }    
  else if(meson==AliHFCorrelationUtils::kDstar){
    // 0.3 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DstarLowPtAss03();	
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DstarMidPtAss03();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DstarHighPtAss03();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DstarLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DstarMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DstarHighPtAss03to1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    
    // 1 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DstarLowPtAss1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DstarMidPtAss1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DstarHighPtAss1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }
  else if(meson==AliHFCorrelationUtils::kDplus){
    // 0.3 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DplusLowPtAss03();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DplusMidPtAss03();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DplusHighPtAss03();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DplusLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DplusMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DplusHighPtAss03to1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 1 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPP2010DplusLowPtAss1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPP2010DplusMidPtAss1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPP2010DplusHighPtAss1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin \n");
    }
  }
  else {
    printf("PP:No meson is found  Check your input \n");
  }
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013(Int_t meson,Double_t ptD,Double_t minptAss, Double_t maxptAss){
  
  if(meson==AliHFCorrelationUtils::kDzero){
    // 0.3 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DzeroLowPtAss03();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DzeroMidPtAss03();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DzeroHighPtAss03();
      }
      
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DzeroLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DzeroMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DzeroHighPtAss03to1();
      }
      
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    
    // 1 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DzeroLowPtAss1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DzeroMidPtAss1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DzeroHighPtAss1();
      } 
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }
  else if(meson==AliHFCorrelationUtils::kDstar){
    // 0.3 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DstarLowPtAss03();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DstarMidPtAss03();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DstarHighPtAss03();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DstarLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DstarMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DstarHighPtAss03to1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 1 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DstarLowPtAss1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DstarMidPtAss1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DstarHighPtAss1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }
  else if(meson==AliHFCorrelationUtils::kDplus){
    // 0.3 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DplusLowPtAss03();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DplusMidPtAss03();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DplusHighPtAss03();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DplusLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DplusMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DplusHighPtAss03to1();
      }      
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    // 1 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001){
      if(ptD>3&&ptD<5){
	InitStandardUncertaintiesPPb2013DplusLowPtAss1();      
      }
      else if(ptD>5&&ptD<8){
	InitStandardUncertaintiesPPb2013DplusMidPtAss1();
      }
      else if(ptD>8&&ptD<16){
	InitStandardUncertaintiesPPb2013DplusHighPtAss1();
      }
      else {
	printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      }
    }
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin \n");
    }
  }
  else {
        printf("pPb-No meson is found  Check your input \n");
  }
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016(Int_t meson,Double_t ptD,Double_t minptAss, Double_t maxptAss){

  if(meson==AliHFCorrelationUtils::kDzero) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-99 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss2to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss2to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss2to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss2to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 3-99 GeV/c
    else if(TMath::Abs(minptAss-3.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss3to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss3to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss3to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss3to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-2 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss==2.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss1to2();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss1to2();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss1to2();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to2();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-3 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss==3){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss2to3();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss2to3();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss2to3();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss2to3();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }            
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }
  else if(meson==AliHFCorrelationUtils::kDstar) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to99();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to1();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss1to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss1to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss1to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-99 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss2to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss2to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss2to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss2to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 3-99 GeV/c
    else if(TMath::Abs(minptAss-3.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss3to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss3to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss3to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss3to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-2 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss==2.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss1to2();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss1to2();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss1to2();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to2();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-3 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss==3){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss2to3();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss2to3();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss2to3();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss2to3();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }            
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }
  else if(meson==AliHFCorrelationUtils::kDplus) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to99();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to1();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss1to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss1to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss1to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-99 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss2to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss2to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss2to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss2to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 3-99 GeV/c
    else if(TMath::Abs(minptAss-3.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss3to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss3to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss3to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss3to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-2 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss==2.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss1to2();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss1to2();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss1to2();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to2();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-3 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss==3){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss2to3();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss2to3();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss2to3();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss2to3();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }            
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }

}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016in020(Int_t meson,Double_t ptD,Double_t minptAss, Double_t maxptAss){

  if(meson==AliHFCorrelationUtils::kDzero) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99in020();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99in020();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1in020();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1in020();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99in020();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99in020();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }         
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }
  else if(meson==AliHFCorrelationUtils::kDstar) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to99in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to99in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to99in020();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99in020();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to1in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to1in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to1in020();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1in020();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss1to99in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss1to99in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss1to99in020();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99in020();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }  
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }
  else if(meson==AliHFCorrelationUtils::kDplus) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to99in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to99in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to99in020();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99in020();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to1in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to1in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to1in020();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1in020();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss1to99in020();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss1to99in020();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss1to99in020();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99in020();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }       
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }

}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016in2060(Int_t meson,Double_t ptD,Double_t minptAss, Double_t maxptAss){

  if(meson==AliHFCorrelationUtils::kDzero) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99in2060();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99in2060();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1in2060();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1in2060();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99in2060();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99in2060();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }         
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }
  else if(meson==AliHFCorrelationUtils::kDstar) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to99in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to99in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to99in2060();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99in2060();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to1in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to1in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to1in2060();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1in2060();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss1to99in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss1to99in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss1to99in2060();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99in2060();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }  
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }
  else if(meson==AliHFCorrelationUtils::kDplus) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to99in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to99in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to99in2060();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99in2060();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to1in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to1in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to1in2060();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1in2060();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss1to99in2060();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss1to99in2060();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss1to99in2060();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99in2060();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }       
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }

}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016in60100(Int_t meson,Double_t ptD,Double_t minptAss, Double_t maxptAss){

  if(meson==AliHFCorrelationUtils::kDzero) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99in60100();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99in60100();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1in60100();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1in60100();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99in60100();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99in60100();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }         
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }
  else if(meson==AliHFCorrelationUtils::kDstar) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to99in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to99in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to99in60100();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99in60100();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss03to1in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss03to1in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss03to1in60100();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1in60100();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DstarLowPtAss1to99in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DstarMidPtAss1to99in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DstarHighPtAss1to99in60100();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99in60100();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }  
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }
  else if(meson==AliHFCorrelationUtils::kDplus) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to99in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to99in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to99in60100();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99in60100();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss03to1in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss03to1in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss03to1in60100();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1in60100();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPPb2016DplusLowPtAss1to99in60100();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPPb2016DplusMidPtAss1to99in60100();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPPb2016DplusHighPtAss1to99in60100();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99in60100();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }       
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
      printf("Using dummy values...\n");
      InitStandardUncertaintiesPPb2016DummyValues();
    }
  }

}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017(Int_t meson,Double_t ptD,Double_t minptAss, Double_t maxptAss){

  if(meson==AliHFCorrelationUtils::kDzero) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DzeroVeryLowPtAss03to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DzeroLowPtAss03to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DzeroMidPtAss03to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DzeroHighPtAss03to99();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DzeroVeryHighPtAss03to99();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DzeroVeryLowPtAss03to1();
      }        
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DzeroLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DzeroMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DzeroHighPtAss03to1();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DzeroVeryHighPtAss03to1();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DzeroVeryLowPtAss1to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DzeroLowPtAss1to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DzeroMidPtAss1to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DzeroHighPtAss1to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DzeroVeryHighPtAss1to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-99 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DzeroVeryLowPtAss2to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DzeroLowPtAss2to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DzeroMidPtAss2to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DzeroHighPtAss2to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DzeroVeryHighPtAss2to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 3-99 GeV/c
    else if(TMath::Abs(minptAss-3.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DzeroVeryLowPtAss3to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DzeroLowPtAss3to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DzeroMidPtAss3to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DzeroHighPtAss3to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DzeroVeryHighPtAss3to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-2 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss==2.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DzeroVeryLowPtAss1to2();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DzeroLowPtAss1to2();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DzeroMidPtAss1to2();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DzeroHighPtAss1to2();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DzeroVeryHighPtAss1to2();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-3 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss==3){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DzeroVeryLowPtAss2to3();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DzeroLowPtAss2to3();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DzeroMidPtAss2to3();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DzeroHighPtAss2to3();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DzeroVeryHighPtAss2to3();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }            
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }
  else if(meson==AliHFCorrelationUtils::kDstar) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DstarVeryLowPtAss03to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DstarLowPtAss03to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DstarMidPtAss03to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DstarHighPtAss03to99();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DstarVeryHighPtAss03to99();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DstarVeryLowPtAss03to1();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DstarLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DstarMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DstarHighPtAss03to1();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DstarVeryHighPtAss03to1();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DstarVeryLowPtAss1to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DstarLowPtAss1to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DstarMidPtAss1to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DstarHighPtAss1to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DstarVeryHighPtAss1to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-99 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DstarVeryLowPtAss2to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DstarLowPtAss2to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DstarMidPtAss2to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DstarHighPtAss2to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DstarVeryHighPtAss2to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 3-99 GeV/c
    else if(TMath::Abs(minptAss-3.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DstarVeryLowPtAss3to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DstarLowPtAss3to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DstarMidPtAss3to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DstarHighPtAss3to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DstarVeryHighPtAss3to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-2 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss==2.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DstarVeryLowPtAss1to2();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DstarLowPtAss1to2();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DstarMidPtAss1to2();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DstarHighPtAss1to2();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DstarVeryHighPtAss1to2();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-3 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss==3){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DstarVeryLowPtAss2to3();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DstarLowPtAss2to3();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DstarMidPtAss2to3();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DstarHighPtAss2to3();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DstarVeryHighPtAss2to3();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }            
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }
  else if(meson==AliHFCorrelationUtils::kDplus) {
    // 0.3-99 GeV/c
    if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DplusVeryLowPtAss03to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DplusLowPtAss03to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DplusMidPtAss03to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DplusHighPtAss03to99();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DplusVeryHighPtAss03to99();
      }      
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 0.3-1 GeV/c
    else if(TMath::Abs(minptAss-0.3)<0.0001 && maxptAss==1.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DplusVeryLowPtAss03to1();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DplusLowPtAss03to1();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DplusMidPtAss03to1();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DplusHighPtAss03to1();
      }
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DplusVeryHighPtAss03to1();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-99 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DplusVeryLowPtAss1to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DplusLowPtAss1to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DplusMidPtAss1to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DplusHighPtAss1to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DplusVeryHighPtAss1to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-99 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DplusVeryLowPtAss2to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DplusLowPtAss2to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DplusMidPtAss2to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DplusHighPtAss2to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DplusVeryHighPtAss2to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 3-99 GeV/c
    else if(TMath::Abs(minptAss-3.)<0.0001 && maxptAss>90.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DplusVeryLowPtAss3to99();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DplusLowPtAss3to99();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DplusMidPtAss3to99();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DplusHighPtAss3to99();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DplusVeryHighPtAss3to99();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 1-2 GeV/c
    else if(TMath::Abs(minptAss-1.)<0.0001 && maxptAss==2.){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DplusVeryLowPtAss1to2();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DplusLowPtAss1to2();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DplusMidPtAss1to2();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DplusHighPtAss1to2();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DplusVeryHighPtAss1to2();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }
    // 2-3 GeV/c
    else if(TMath::Abs(minptAss-2.)<0.0001 && maxptAss==3){
      if(ptD>2&&ptD<3){
        InitStandardUncertaintiesPP2017DplusVeryLowPtAss2to3();
      }
      else if(ptD>3&&ptD<5){
        InitStandardUncertaintiesPP2017DplusLowPtAss2to3();
      }
      else if(ptD>5&&ptD<8){
        InitStandardUncertaintiesPP2017DplusMidPtAss2to3();
      }
      else if(ptD>8&&ptD<16){
        InitStandardUncertaintiesPP2017DplusHighPtAss2to3();
      } 
      else if(ptD>16&&ptD<24){
        InitStandardUncertaintiesPP2017DplusVeryHighPtAss2to3();
      }          
      else {
        printf("Methods for syst unc not ready yet for this pt(D) bin  \n");
      }
    }            
    else {
      printf("Methods for syst unc not ready yet for this pt(ass) bin  \n");
    }
  }

}


TGraphAsymmErrors* AliHFDhadronCorrSystUnc::GetUncGraphFromHistos(TH1D *hRef,TH1D *hMin,TH1D *hMax){
  
  //  Int_t npoints=hMin->GetNbinsX();
  Double_t ew=hMin->GetBinWidth(1)/2.;
  Double_t value,eyl,eym;
  
  TGraphAsymmErrors *gr=new TGraphAsymmErrors();
  for(Int_t j=1;j<=hMin->GetNbinsX();j++){
    if(hRef){
      value=hRef->GetBinContent(j);
      eyl=hMin->GetBinContent(j)*value;
      if(eyl<0.)eyl*=-1.;
      if(hMax)eym=hMax->GetBinContent(j)*value;
      else eym=eyl;
    }
    else {
      value=0.;
      eyl=hMin->GetBinContent(j);
      if(eyl<0.)eyl*=-1.;
      if(hMax)eym=hMax->GetBinContent(j);
      else eym=eyl;
    }
    
    gr->SetPoint(j-1,hMin->GetBinCenter(j),value);
    gr->SetPointError(j-1,ew,ew,eyl,eym);
  }
  
  return gr;
}

void AliHFDhadronCorrSystUnc::BuildGraphsRelUnc(){
  if(fgrYieldUncRel)delete fgrYieldUncRel;
  if(fgrBackSubUncRel)delete fgrBackSubUncRel;
  if(fgrMCcorrectionsRel)delete fgrMCcorrectionsRel;
  if(fgrMCDefficiencyRel)delete fgrMCDefficiencyRel;
  if(fgrSecContaminationRel)delete fgrSecContaminationRel;
  if(fgrMCclosureTestRel)delete fgrMCclosureTestRel;  
  if(fgrBeautyFDRel)delete fgrBeautyFDRel;   
  
  fgrYieldUncRel=GetUncGraphFromHistos(0x0,fhYieldExtraction,0x0);
  fgrYieldUncRel->SetName("fgrYieldUncRel");
  fgrYieldUncRel->SetTitle("D meson yield");


  fgrBackSubUncRel=GetUncGraphFromHistos(0x0,fhBackSubtractionMin,fhBackSubtractionMax);
  fgrBackSubUncRel->SetName("fgrBackSubUncRel");
  fgrBackSubUncRel->SetTitle("Background D correlation subtraction");



  fgrMCcorrectionsRel=GetUncGraphFromHistos(0x0,fhMCcorrectionsMin,fhMCcorrectionsMax);
  fgrMCcorrectionsRel->SetName("fgrMCcorrectionsRel");
  fgrMCcorrectionsRel->SetTitle("Associated track efficiency");

  fgrMCDefficiencyRel=GetUncGraphFromHistos(0x0,fhMCDefficiencyMin,fhMCDefficiencyMax);
  fgrMCDefficiencyRel->SetName("fgrMCDefficiencyRel");
  fgrMCDefficiencyRel->SetTitle("D meson efficiency");

  fgrSecContaminationRel=GetUncGraphFromHistos(0x0,fhSecContaminationMin,fhSecContaminationMax);
  fgrSecContaminationRel->SetName("fgrSecContaminationRel");
  fgrSecContaminationRel->SetTitle("Secondary contamination");

  fgrMCclosureTestRel=GetUncGraphFromHistos(0x0,fhMCclosureTestMin,fhMCclosureTestMax);
  fgrMCclosureTestRel->SetName("fgrMCclosureTestRel");
  fgrMCclosureTestRel->SetTitle("MC closure test");

  fgrBeautyFDRel=GetUncGraphFromHistos(0x0,fhBeautyFDmin,fhBeautyFDmax);
  fgrBeautyFDRel->SetName("fgrBeautyFDRel");
  fgrBeautyFDRel->SetTitle("Feed-down");

  fgrYieldUncRel->SetLineColor(kBlue);
  fgrYieldUncRel->SetLineWidth(2);
  fgrYieldUncRel->SetFillStyle(3002);
  fgrYieldUncRel->SetFillColor(kBlue);
  fgrYieldUncRel->SetMarkerColor(kBlue);
  fgrYieldUncRel->SetMarkerStyle(20);


  fgrBackSubUncRel->SetLineColor(kMagenta);
  fgrBackSubUncRel->SetLineWidth(2);
  fgrBackSubUncRel->SetFillStyle(3008);
  fgrBackSubUncRel->SetFillColor(kMagenta);
  fgrBackSubUncRel->SetMarkerColor(kBlue);
  fgrBackSubUncRel->SetMarkerStyle(20);


  fgrMCcorrectionsRel->SetLineColor(kGreen);
  fgrMCcorrectionsRel->SetLineWidth(2);
  fgrMCcorrectionsRel->SetFillStyle(3006);
  fgrMCcorrectionsRel->SetFillColor(kGreen);
  fgrMCcorrectionsRel->SetMarkerColor(kGreen);
  fgrMCcorrectionsRel->SetMarkerStyle(22);

  fgrMCDefficiencyRel->SetLineColor(kCyan);
  fgrMCDefficiencyRel->SetLineWidth(2);
  fgrMCDefficiencyRel->SetFillStyle(3004);
  fgrMCDefficiencyRel->SetFillColor(kCyan);
  fgrMCDefficiencyRel->SetMarkerColor(kCyan);
  fgrMCDefficiencyRel->SetMarkerStyle(22);

  fgrSecContaminationRel->SetLineColor(kOrange);
  fgrSecContaminationRel->SetLineWidth(2);
  fgrSecContaminationRel->SetFillStyle(3007);
  fgrSecContaminationRel->SetFillColor(kOrange);
  fgrSecContaminationRel->SetMarkerColor(kOrange);
  fgrSecContaminationRel->SetMarkerStyle(22);

  fgrMCclosureTestRel->SetLineColor(kRed);
  fgrMCclosureTestRel->SetLineWidth(2);
  fgrMCclosureTestRel->SetFillStyle(3005);
  fgrMCclosureTestRel->SetFillColor(kRed);
  fgrMCclosureTestRel->SetMarkerColor(kRed);
  fgrMCclosureTestRel->SetMarkerStyle(26);

  fgrBeautyFDRel->SetLineColor(kViolet);
  fgrBeautyFDRel->SetLineWidth(2);
  fgrBeautyFDRel->SetFillStyle(3021);
  fgrBeautyFDRel->SetFillColor(kViolet);
  fgrBeautyFDRel->SetMarkerColor(kViolet);
  fgrBeautyFDRel->SetMarkerStyle(28);


  

}

void AliHFDhadronCorrSystUnc::BuildGraphsUnc(TH1D *hRef){

  if(fgrYieldUnc)delete fgrYieldUnc;
  if(fgrBackSubUnc)delete fgrBackSubUnc;
  if(fgrMCcorrections)delete fgrMCcorrections;
  if(fgrMCDefficiency)delete fgrMCDefficiency;
  if(fgrSecContamination)delete fgrSecContamination;
  if(fgrMCclosureTest)delete fgrMCclosureTest;  
  if(fgrBeautyFD)delete fgrBeautyFD;   
  if(fgrTotalRel)delete fgrTotalRel;
  if(fgrTotal)delete fgrTotal;
  if(fgrTotalNonFlatDPhi)delete fgrTotalNonFlatDPhi;
  if(fgrTotalNonFlatDPhiRel)delete fgrTotalNonFlatDPhiRel;
  if(fgrTotalFlatDPhi)delete fgrTotalFlatDPhi;
  if(fgrTotalFlatDPhiRel)delete fgrTotalFlatDPhiRel;

  fgrYieldUnc=GetUncGraphFromHistos(hRef,fhYieldExtraction,0x0);
  fgrYieldUnc->SetName("fgrYieldUnc");
  fgrYieldUnc->SetTitle("D meson yield");

  fgrBackSubUnc=GetUncGraphFromHistos(hRef,fhBackSubtractionMin,fhBackSubtractionMax);
  fgrBackSubUnc->SetName("fgrBackSubUnc");
  fgrBackSubUnc->SetTitle("Background D correlation subtraction");


  fgrMCcorrections=GetUncGraphFromHistos(hRef,fhMCcorrectionsMin,fhMCcorrectionsMax);
  fgrMCcorrections->SetName("fgrMCcorrections");
  fgrMCcorrections->SetTitle("Associated track efficiency");

  fgrMCDefficiency=GetUncGraphFromHistos(hRef,fhMCDefficiencyMin,fhMCDefficiencyMax);
  fgrMCDefficiency->SetName("fgrMCDefficiency");
  fgrMCDefficiency->SetTitle("D meson efficiency");

  fgrSecContamination=GetUncGraphFromHistos(hRef,fhSecContaminationMin,fhSecContaminationMax);
  fgrSecContamination->SetName("fgrSecContamination");
  fgrSecContamination->SetTitle("Secondary contamination");

  fgrMCclosureTest=GetUncGraphFromHistos(hRef,fhMCclosureTestMin,fhMCclosureTestMax);
  fgrMCclosureTest->SetName("fgrMCclosureTest");
  fgrMCclosureTest->SetTitle("MC closure test");

  fgrBeautyFD=GetUncGraphFromHistos(hRef,fhBeautyFDmin,fhBeautyFDmax);
  fgrBeautyFD->SetName("fgrBeautyFD");
  fgrBeautyFD->SetTitle("Feed-down");

  fgrYieldUnc->SetLineColor(kBlue);
  fgrYieldUnc->SetLineWidth(2);
  fgrYieldUnc->SetFillStyle(0);
  fgrYieldUnc->SetFillColor(kBlue);
  fgrYieldUnc->SetMarkerColor(kBlue);
  fgrYieldUnc->SetMarkerStyle(20);


  fgrBackSubUnc->SetLineColor(kMagenta);
  fgrBackSubUnc->SetLineWidth(2);
  fgrBackSubUnc->SetFillStyle(0);
  fgrBackSubUnc->SetFillColor(kMagenta);
  fgrBackSubUnc->SetMarkerColor(kBlue);
  fgrBackSubUnc->SetMarkerStyle(20);


  fgrMCcorrections->SetLineColor(kGreen);
  fgrMCcorrections->SetLineWidth(2);
  fgrMCcorrections->SetFillStyle(0);
  fgrMCcorrections->SetFillColor(kGreen);
  fgrMCcorrections->SetMarkerColor(kGreen);
  fgrMCcorrections->SetMarkerStyle(22);

  fgrMCDefficiency->SetLineColor(kCyan);
  fgrMCDefficiency->SetLineWidth(2);
  fgrMCDefficiency->SetFillStyle(0);
  fgrMCDefficiency->SetFillColor(kCyan);
  fgrMCDefficiency->SetMarkerColor(kCyan);
  fgrMCDefficiency->SetMarkerStyle(22);

  fgrSecContamination->SetLineColor(kOrange);
  fgrSecContamination->SetLineWidth(2);
  fgrSecContamination->SetFillStyle(0);
  fgrSecContamination->SetFillColor(kOrange);
  fgrSecContamination->SetMarkerColor(kOrange);
  fgrSecContamination->SetMarkerStyle(22);

  fgrMCclosureTest->SetLineColor(kRed);
  fgrMCclosureTest->SetLineWidth(2);
  fgrMCclosureTest->SetFillStyle(0);
  fgrMCclosureTest->SetFillColor(kRed);
  fgrMCclosureTest->SetMarkerColor(kRed);
  fgrMCclosureTest->SetMarkerStyle(26);

  fgrBeautyFD->SetLineColor(kViolet);
  fgrBeautyFD->SetLineWidth(2);
  fgrBeautyFD->SetFillStyle(0);
  fgrBeautyFD->SetFillColor(kViolet);
  fgrBeautyFD->SetMarkerColor(kViolet);
  fgrBeautyFD->SetMarkerStyle(28);

  //  fgrTotalRel=GetUncGraphFromHistos(0x0,fhTotalMin,fhTotalMax);
  if(fhTotalMin){
    fgrTotalRel=GetUncGraphFromHistos(0x0,fhTotalMin,fhTotalMax);
    fgrTotalRel->SetLineColor(kBlack);
    fgrTotalRel->SetLineWidth(2);
    fgrTotalRel->SetFillStyle(0);
    //    fgrTotalRel->SetFillColor(kRed);
    fgrTotalRel->SetMarkerColor(kBlack);
    fgrTotalRel->SetMarkerStyle(26);

    fgrTotal=GetUncGraphFromHistos(hRef,fhTotalMin,fhTotalMax);
    fgrTotal->SetLineColor(kBlack);
    fgrTotal->SetLineWidth(2);
    fgrTotal->SetFillStyle(0);
    fgrTotal->SetFillColor(kRed);
    fgrTotal->SetMarkerColor(kBlack);
    fgrTotal->SetMarkerStyle(26);
  }
  
  if(fhTotalNonFDMin){
    fgrTotalNonFD=GetUncGraphFromHistos(hRef,fhTotalNonFDMin,fhTotalNonFDMax);
    fgrTotalNonFD->SetLineColor(kBlue);
    fgrTotalNonFD->SetLineWidth(2);
    fgrTotalNonFD->SetFillStyle(3005);
    fgrTotalNonFD->SetFillColor(kBlue);
    fgrTotalNonFD->SetMarkerColor(kBlue);
    fgrTotalNonFD->SetMarkerStyle(26);  
  }

  if(fhTotalNonFlatDPhiMin){
    fgrTotalNonFlatDPhiRel=GetUncGraphFromHistos(0x0,fhTotalNonFlatDPhiMin,fhTotalNonFlatDPhiMax);
    fgrTotalNonFlatDPhiRel->SetLineColor(kBlack);
    fgrTotalNonFlatDPhiRel->SetLineWidth(2);
    fgrTotalNonFlatDPhiRel->SetFillStyle(0);
    //    fgrTotalRel->SetFillColor(kRed);
    fgrTotalNonFlatDPhiRel->SetMarkerColor(kBlack);
    fgrTotalNonFlatDPhiRel->SetMarkerStyle(26);

    fgrTotalNonFlatDPhi=GetUncGraphFromHistos(hRef,fhTotalNonFlatDPhiMin,fhTotalNonFlatDPhiMax);
    fgrTotalNonFlatDPhi->SetLineColor(kBlack);
    fgrTotalNonFlatDPhi->SetLineWidth(2);
    fgrTotalNonFlatDPhi->SetFillStyle(3005);
    fgrTotalNonFlatDPhi->SetFillColor(kRed);
    fgrTotalNonFlatDPhi->SetMarkerColor(kBlack);
    fgrTotalNonFlatDPhi->SetMarkerStyle(26);  

    fgrTotalFlatDPhiRel=GetUncGraphFromHistos(0x0,fhtotFlatMin,fhtotFlatMax);
    fgrTotalFlatDPhiRel->SetLineColor(kBlack);
    fgrTotalFlatDPhiRel->SetLineWidth(2);
    fgrTotalFlatDPhiRel->SetFillStyle(0);
    //    fgrTotalRel->SetFillColor(kRed);
    fgrTotalFlatDPhiRel->SetMarkerColor(kBlack);
    fgrTotalFlatDPhiRel->SetMarkerStyle(26);

    fgrTotalFlatDPhi=GetUncGraphFromHistos(hRef,fhtotFlatMin,fhtotFlatMax);
    fgrTotalFlatDPhi->SetLineColor(kBlack);
    fgrTotalFlatDPhi->SetLineWidth(2);
    fgrTotalFlatDPhi->SetFillStyle(3005);
    fgrTotalFlatDPhi->SetFillColor(kBlack);
    fgrTotalFlatDPhi->SetMarkerColor(kBlack);
    fgrTotalFlatDPhi->SetMarkerStyle(26);  
  }

}


TCanvas* AliHFDhadronCorrSystUnc::BuildSystUncertaintyPlotVsDeltaPhi(TH1D *hCorrPlot,Int_t doInit){

  if(doInit!=0){
    BuildTotalUncHisto();
    BuildTotalNonFDUncHisto();
    BuildTotalNonFlatUncHisto();
    BuildGraphsUnc(hCorrPlot);
    BuildGraphsRelUnc();

  }

  // Easy canva with relative uncertainties
  TCanvas *cCanvaRelUnc=new TCanvas("cCanvaRelUnc","cCanvaRelUnc",700,700);
  cCanvaRelUnc->cd();
  TH2D *hDraw=new TH2D("hDraw","hDraw",32,-TMath::Pi()/2.,3./2.*TMath::Pi(),200,-2.,2.);
  hDraw->SetXTitle("#Delta#phi (rad)");
  hDraw->SetYTitle("Relative uncertainty");
  hDraw->Draw();
  
  
  fgrYieldUncRel->Draw("E2");
  fgrBackSubUncRel->Draw("E2");
  fgrMCcorrectionsRel->Draw("E2");
  fgrMCDefficiencyRel->Draw("E2");
  fgrSecContaminationRel->Draw("E2");
  fgrMCclosureTestRel->Draw("E2");
  fgrBeautyFDRel->Draw("E2");
  //  fgrTotalRel->Draw("E2");

  fhtotFlatMin->Draw("same");
  fhtotFlatMax->Draw("same");

  fhTotalMin->Draw("same");
  fhTotalMax->Draw("same");

  TCanvas *cCanvaFinalPlot=new TCanvas("cCanvaFinalPlot","cCanvaFinalPlot",700,700);
  cCanvaFinalPlot->cd();
  hCorrPlot->Draw();
  //  fgrYieldUnc->Draw("pE2");
  //  fgrBackSubUnc->Draw("pE2");
  //  fgrMCcorrections->Draw("pE2");
  //  fgrMCclosureTest->Draw("pE2");
  //  fgrBeautyFD->Draw("pE2");
  fgrTotal->Draw("E2");


  TCanvas *cCanvaFinalPlotFD=new TCanvas("cCanvaFinalPlotFD","cCanvaFinalPlotFD",700,700);
  cCanvaFinalPlotFD->cd();
  hCorrPlot->Draw();
  //  fgrYieldUnc->Draw("pE2");
  //  fgrBackSubUnc->Draw("pE2");
  //  fgrMCcorrections->Draw("pE2");
  //  fgrMCclosureTest->Draw("pE2");
  //  fgrBeautyFD->Draw("pE2");
  fgrBeautyFD->Draw("E2");
  fgrTotalNonFD->Draw("E2");
  fgrTotalNonFlatDPhi->Draw("E2");
  fgrTotalFlatDPhi->Draw("E2");

  return cCanvaFinalPlot;
}
  
  
TH1D* AliHFDhadronCorrSystUnc::GetVariedHisto(const TH1D *hIn,const TGraphAsymmErrors *gr,Int_t minmax){

  TH1D *hOut;
  if(minmax==0){
    hOut=(TH1D*)hIn->Clone(Form("%sVariedMin",hIn->GetName()));
  }
  else if(minmax==1){
    hOut=(TH1D*)hIn->Clone(Form("%sVariedMax",hIn->GetName()));
  }
  //  Int_t np=gr->GetN();
  Double_t *x,*y,*ely,*ehy;//*elx,*ehx,
  x=gr->GetX();
  y=gr->GetY();
  //  elx=gr->GetEXlow();
  // ehx=gr->GetEXhigh();
   ely=gr->GetEYlow();
  ehy=gr->GetEYhigh();

  for(Int_t jp=1;jp<=hIn->GetNbinsX();jp++){
    if(TMath::Abs(x[jp-1]-hIn->GetBinCenter(jp))>0.0001){
      Printf("Bin Mismatch: this method assumes that the graph has the points in the center of the histo bin centers");
      return 0x0;
    }
    if(TMath::Abs(y[jp-1]-hIn->GetBinContent(jp))>0.0001){
      Printf("Value Mismatch: this method relies on the fact that the graph central values are the same as those of the histo");
      return 0x0;
    }
    if(minmax==0){
      hOut->SetBinContent(jp,y[jp-1]-ely[jp-1]);
    }
    else if(minmax==1){
      hOut->SetBinContent(jp,y[jp-1]+ehy[jp-1]);
    }
    hOut->SetBinError(jp,hIn->GetBinError(jp));
  }

  return hOut;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////
/////
///// METHODS WITH UNCERTAINTIES: PP 2010, for kinematic cases approved after HP2013
/////
////////////////////////////////////////////////////////////////////////////////////////////////////////


// START FROM DPLUS FOR PT(ASSOC)>0.3
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusLowPtAss03(){ 
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusMidPtAss03(){ 

  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusHighPtAss03(){ 
  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



//////// HIGHER PT ASS THRESHOLDS

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroLowPtAss03to1(){ 
  Printf("Setting syst for D0 pp 2010 3-5 0.5 thr");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroMidPtAss03to1(){ 
  Printf("Setting syst for D0 pp 2010 5-8 0.5 thr");

  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroHighPtAss03to1(){ 
  Printf("Setting syst for D0 pp 2010 8-16 0.5 thr");
  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}




//--------------------------------------------------
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2010, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS, -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2010, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS/ -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarHighPtAss03to1(){
  Printf("Setting uncertainties for Dstar pp 2010, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }
// check those values
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1); // check this one in particular
  }
  
  // MC CORRECTIONS   -5% +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }
  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pp 2010, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2010, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2010, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



// pt(assoc)> 1 GeV/c
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroLowPtAss1(){
  Printf("Setting uncertainties for Dzero pp 2010, 3<pt(D)<5, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroMidPtAss1(){
  Printf("Setting uncertainties for Dzero pp 2010, 5<pt(D)<8, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DzeroHighPtAss1(){
  Printf("Setting uncertainties for Dzero pp 2010, 8<pt(D)<16, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}




//--------------------------------------------------
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarLowPtAss1(){ 
  Printf("Setting uncertainties for Dstar pp 2010, 3<pt(D)<5, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS, -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarMidPtAss1(){
  Printf("Setting uncertainties for Dstar pp 2010, 5<pt(D)<8, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS/ -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DstarHighPtAss1(){ 
  Printf("Setting uncertainties for Dstar pp 2010, 8<pt(D)<16, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
  
      fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS   -5% +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }
  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,0.);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusLowPtAss1(){
  Printf("Setting uncertainties for Dplus pp 2010, 3<pt(D)<5, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusMidPtAss1(){ 
  Printf("Setting uncertainties for Dplus pp 2010, 5<pt(D)<8, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2010DplusHighPtAss1(){
  Printf("Setting uncertainties for Dplus pp 2010, 8<pt(D)<16, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.10);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.05);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.05);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.0);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}






////////////////////////////////////////////////////////////////////////////////////////////////////////
/////
///// METHODS WITH UNCERTAINTIES: pPb 2013
/////
////////////////////////////////////////////////////////////////////////////////////////////////////////


// pt assoc > 0.3 GeV/c

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroLowPtAss03(){ 
  Printf("Setting uncertainties for Dzero pPb 2013, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroMidPtAss03(){ 
  Printf("Setting uncertainties for Dzero pPb 2013, 5<pt(D)<8, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroHighPtAss03(){ 
  Printf("Setting uncertainties for Dzero pPb 2013, 8<pt(D)<16, pt(assoc)>0.3 GeV/c ");    
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}




//--------------------------------------------------
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarLowPtAss03(){ 
  Printf("Setting uncertainties for Dstar pPb 2013, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS, -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarMidPtAss03(){ 
  Printf("Setting uncertainties for Dstar pPb 2013, 5<pt(D)<8, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS/ -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarHighPtAss03(){ 
  Printf("Setting uncertainties for Dstar pPb 2013, 8<pt(D)<16, pt(assoc)>0.3 GeV/c ");    
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS   -5% +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }
  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}




void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusLowPtAss03(){
  Printf("Setting uncertainties for Dplus pPb 2013, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");    
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusMidPtAss03(){
  Printf("Setting uncertainties for Dplus pPb 2013, 5<pt(D)<8, pt(assoc)>0.3 GeV/c ");    
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusHighPtAss03(){ 
  Printf("Setting uncertainties for Dplus pPb 2013, 8<pt(D)<16, pt(assoc)>0.3 GeV/c ");    
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



//////// HIGHER PT ASS THRESHOLDS

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pPb 2013, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");    
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pPb 2013, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");    
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pPb 2013, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");      
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}




//--------------------------------------------------
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pPb 2013, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");      
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS, -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pPb 2013, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");      
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS/ -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pPb 2013, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");        
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS   -5% +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }
  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pPb 2013, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");        
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pPb 2013, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");        
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pPb 2013, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");          
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore05";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



// pt(assoc)> 1 GeV/c
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroLowPtAss1(){
  Printf("Setting uncertainties for Dzero pPb 2013, 3<pt(D)<5, pt(assoc)>1 GeV/c ");          
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroMidPtAss1(){
  Printf("Setting uncertainties for Dzero pPb 2013, 5<pt(D)<8, pt(assoc)>1 GeV/c ");          
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DzeroHighPtAss1(){ 
  Printf("Setting uncertainties for Dzero pPb 2013, 8<pt(D)<16, pt(assoc)>1 GeV/c ");            
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.05);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}




//--------------------------------------------------
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarLowPtAss1(){ 
 Printf("Setting uncertainties for Dstar pPb 2013, 3<pt(D)<5, pt(assoc)>1 GeV/c ");            
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS, -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarMidPtAss1(){ 
 Printf("Setting uncertainties for Dstar pPb 2013, 5<pt(D)<8, pt(assoc)>1 GeV/c ");            
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS/ -5%  10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DstarHighPtAss1(){ 
  Printf("Setting uncertainties for Dstar pPb 2013, 8<pt(D)<16, pt(assoc)>1 GeV/c ");            
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.05);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS   -5% +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }
  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.05);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.05);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }


}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusLowPtAss1(){ 
  Printf("Setting uncertainties for Dplus pPb 2013, 3<pt(D)<5, pt(assoc)>1 GeV/c ");            
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }


  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    //    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusMidPtAss1(){ 
  Printf("Setting uncertainties for Dplus pPb 2013, 5<pt(D)<8, pt(assoc)>1 GeV/c ");            
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS:  -5%  +10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2013DplusHighPtAss1(){ 
  Printf("Setting uncertainties for Dplus pPb 2013, 8<pt(D)<16, pt(assoc)>1 GeV/c ");            
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }

  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.1);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.1);
  }
  
  // MC CORRECTIONS,  -5% 10% for assoc track eff
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }


  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.1);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.1);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.035);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.035);
  }

  // MC CLOSURETEST (D meson efficiency)
  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinLowEdge(j);
    fhMCclosureTestMin->SetBinContent(j,-0.02);
    
    if(-0.4<x&&x<-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
    else if(-0.2<x&&x<-0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    else if(-0.1<x&&x<0.1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.02);      
    }
    else if(0.1<x&&x<0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.015);      
    }
    if(0.2<x&&x<0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-0.01);      
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.02);
    
    //     if(-0.4<x&&x<-0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.2<x&&x<-0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     else if(-0.1<x&&x<0.1){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.08);      
    //     }
    //     else if(0.1<x&&x<0.2){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.06);      
    //     }
    //     if(0.2<x&&x<0.4){    
    //       fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)-0.04);      
    //     }
    
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }

}


/************************************************************/
/*****  METHODS FOR pPb 2016 - FOR PRELIMINARY SQM 2017 *****/
/************************************************************/


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}




void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  } 

  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, <2pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)16<5, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}




void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }

   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }

   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }

   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}




void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,2,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }
  

  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, 1<pt(assoc)<2 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,2.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, 2<pt(assoc)<3 GeV/c ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,2,3.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}



/************* pPb 2016 vs centrality - 0-20% ****************************/


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 0-20cc ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  } 

  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }

   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99in020(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 0-20cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,1); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}



/************* pPb 2016 vs centrality - 20-60% ****************************/


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 20-60cc ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  } 

  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }

   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99in2060(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 20-60cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,2); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


/************* pPb 2016 vs centrality - 60-100% ****************************/


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 60-100cc ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroLowPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroMidPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroHighPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DzeroVeryHighPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dzero pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.025);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.025);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarLowPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  } 

  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarMidPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarHighPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(10,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }

   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DstarVeryHighPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dstar pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.04);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.04);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusLowPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 3<pt(D)<5, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusMidPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 5<pt(D)<8, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(6.5,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusHighPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 8<pt(D)<16, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(12,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>0.3 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss03to1in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, 0.3<pt(assoc)<1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.03);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.03);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,0.3,1.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DplusVeryHighPtAss1to99in60100(){ 
  Printf("Setting uncertainties for Dplus pPb 2016, 16<pt(D)<24, pt(assoc)>1 GeV/c, 60-100cc ");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
    
  //   if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmin->SetBinContent(j,fhBeautyFDmin->GetBinContent(j)-0.04);      
//     }
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
//     if(-0.4<x&&x<-0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.2<x&&x<-0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     else if(-0.1<x&&x<0.1){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.08);      
//     }
//     else if(0.1<x&&x<0.2){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.06);      
//     }
//     if(0.2<x&&x<0.4){    
//       fhBeautyFDmax->SetBinContent(j,fhBeautyFDmax->GetBinContent(j)+0.04);      
//     } 
    
  }
  
}


/************************************************/
/*          pp 2017 - HP Preliminaries          */
/************************************************/


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 2<pt(D)<3, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 2<pt(D)<3, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt03to1";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 2<pt(D)<3, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 2<pt(D)<3, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 2<pt(D)<3, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 2<pt(D)<3, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt1to2";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 2<pt(D)<3, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt2to3";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.025);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.025);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt03to1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 3<pt(D)<5, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.04);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.04);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 3<pt(D)<5, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 3<pt(D)<5, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 3<pt(D)<5, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt1to2";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 3<pt(D)<5, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt2to3";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroMidPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 5<pT(D)<8, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 5<pT(D)<8, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt03to1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroMidPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 5<pT(D)<8, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroMidPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 5<pT(D)<8, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroMidPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 5<pT(D)<8, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroMidPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 5<pT(D)<8, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt1to2";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroMidPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 5<pT(D)<8, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt2to3";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 8<pT(D)<16, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 8<pT(D)<16, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt03to1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 8<pT(D)<16, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 8<pT(D)<16, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 8<pT(D)<16, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 8<pT(D)<16, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt1to2";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 8<pT(D)<16, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt2to3";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 16<pT(D)<24, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 16<pT(D)<24, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt03to1";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 16<pT(D)<24, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 16<pT(D)<24, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 16<pT(D)<24, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 16<pT(D)<24, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt1to2";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DzeroVeryHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dzero pp 2017, 16<pT(D)<24, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDzero;
  fstrmeson="Dzero";
  fstrptAss="pt2to3";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.025);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.025);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 2<pt(D)<3, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 2<pt(D)<3, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt03to1";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 2<pt(D)<3, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 2<pt(D)<3, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 2<pt(D)<3, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 2<pt(D)<3, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt1to2";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 2<pt(D)<3, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt2to3";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt03to1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 3<pt(D)<5, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 3<pt(D)<5, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 3<pt(D)<5, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.055);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.055);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 3<pt(D)<5, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt1to2";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 3<pt(D)<5, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt2to3";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.06);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.06);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarMidPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 5<pT(D)<8, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 5<pT(D)<8, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt03to1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarMidPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 5<pT(D)<8, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarMidPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 5<pT(D)<8, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarMidPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 5<pT(D)<8, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.055);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.055);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarMidPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 5<pT(D)<8, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt1to2";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarMidPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 5<pT(D)<8, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt2to3";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.02);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.02);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.02);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.06);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.06);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.015);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.015);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 8<pT(D)<16, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 8<pT(D)<16, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt03to1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 8<pT(D)<16, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 8<pT(D)<16, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 8<pT(D)<16, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.055);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.055);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 8<pT(D)<16, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt1to2";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 8<pT(D)<16, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt2to3";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.015);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.06);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.06);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 16<pT(D)<24, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.03);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.03);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.03);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 16<pT(D)<24, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt03to1";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.03);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.03);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.03);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.03);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.03);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 16<pT(D)<24, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.03);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.03);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.03);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 16<pT(D)<24, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.03);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.03);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.03);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 16<pT(D)<24, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.03);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.03);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.03);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.055);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.055);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 16<pT(D)<24, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt1to2";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.03);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.03);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.03);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.04);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.04);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DstarVeryHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dstar pp 2017, 16<pT(D)<24, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDstar;
  fstrmeson="Dstar";
  fstrptAss="pt2to3";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.03);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.03);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.03);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.05);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.05);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}



void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 2<pt(D)<3, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 2<pt(D)<3, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt03to1";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 2<pt(D)<3, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 2<pt(D)<3, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 2<pt(D)<3, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 2<pt(D)<3, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt1to2";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 2<pt(D)<3, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt2to3";
  fstrptD="Dpt2to3";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusLowPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 3<pt(D)<5, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusLowPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 3<pt(D)<5, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt03to1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusLowPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 3<pt(D)<5, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusLowPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 3<pt(D)<5, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusLowPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 3<pt(D)<5, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusLowPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 3<pt(D)<5, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt1to2";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusLowPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 3<pt(D)<5, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt2to3";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusMidPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 5<pT(D)<8, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusMidPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 5<pT(D)<8, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt03to1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusMidPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 5<pT(D)<8, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusMidPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 5<pT(D)<8, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusMidPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 5<pT(D)<8, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusMidPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 5<pT(D)<8, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt1to2";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusMidPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 5<pT(D)<8, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt2to3";
  fstrptD="Dpt5to8";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.01);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.01);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 8<pT(D)<16, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 8<pT(D)<16, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt03to1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 8<pT(D)<16, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 8<pT(D)<16, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 8<pT(D)<16, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 8<pT(D)<16, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt1to2";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 8<pT(D)<16, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt2to3";
  fstrptD="Dpt8to16";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}


void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryHighPtAss03to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 16<pT(D)<24, pt(assoc)>0.3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
   
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryHighPtAss03to1(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 16<pT(D)<24, 0.3<pt(assoc)<1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt03to1";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.025);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.025);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.02);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.02);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryHighPtAss1to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 16<pT(D)<24, pt(assoc)>1 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore1";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryHighPtAss2to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 16<pT(D)<24, pt(assoc)>2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore2";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryHighPtAss3to99(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 16<pT(D)<24, pt(assoc)>3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore3";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.035);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.035);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryHighPtAss1to2(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 16<pT(D)<24, 1<pt(assoc)<2 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt1to2";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.040);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.040);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.015);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.015);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}

void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPP2017DplusVeryHighPtAss2to3(){ 
  Printf("Setting uncertainties for Dplus pp 2017, 16<pT(D)<24, 2<pt(assoc)<3 GeV/c ");
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="pt2to3";
  fstrptD="Dpt16to24";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.01);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.01);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.01);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.045);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.045);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.02);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.02);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.01);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.01);
  }


  // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(4,0.3,99.,mod,2,0); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMin->SetBinContent(j,fhMCclosureTestMin->GetBinContent(j)-TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
    
    if(-1.2<x&&x<=-1){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));      
    }
    else if(-1.<x&&x<=-0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));      
    }
    else if(-0.8<x&&x<=-0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));       
    }
    else if(-0.6<x&&x<=-0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));          
    }
    else if(-0.4<x&&x<=-0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));        
    }
    else if(-0.2<x&&x<=0.){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));       
    }
    else if(0.<x&&x<=0.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[0]-1)/TMath::Sqrt(12));        
    }
    else if(0.2<x&&x<=0.4){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[1]-1)/TMath::Sqrt(12));         
    }
    else if(0.4<x&&x<=0.6){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[2]-1)/TMath::Sqrt(12));            
    }
    else if(0.6<x&&x<=0.8){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[3]-1)/TMath::Sqrt(12));      
    }
    else if(0.8<x&&x<=1.0){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[4]-1)/TMath::Sqrt(12));          
    }
    else if(1.0<x&&x<=1.2){    
      fhMCclosureTestMax->SetBinContent(j,fhMCclosureTestMax->GetBinContent(j)+TMath::Abs(mod[5]-1)/TMath::Sqrt(12));          
    }
  }
 
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.05);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.03);    
  }
  
}











































/*********************** DUMMY CASE (FOR KINE CASES NOT TO BE USED; BUT TO AVOID CODE CRASHES) **********************/
    
void AliHFDhadronCorrSystUnc::InitStandardUncertaintiesPPb2016DummyValues(){ 
  Printf("Setting uncertainties as DUMMY!\n");  
  fmeson=AliHFCorrelationUtils::kDplus;
  fstrmeson="Dplus";
  fstrptAss="ptAsMore03";
  fstrptD="Dpt3to5";
  if(!fhDeltaPhiTemplate){
    fhDeltaPhiTemplate=new TH1D("fhDeltaPhiTemplate","fhDeltaPhiTemplate",32,-TMath::Pi()/2.,3./2.*TMath::Pi());
  }
  Double_t x;
  // D MESON YIELD EXTRACTION (->NORMALIZATION): relative uncertainty is constant
  fhYieldExtraction=(TH1D*)fhDeltaPhiTemplate->Clone("fhYieldExtraction");
  for(Int_t j=1;j<=fhYieldExtraction->GetNbinsX();j++){
    fhYieldExtraction->SetBinContent(j,0.00);
  }

  // Background D MESON candidate subtraction (side-band variations, etc.)
  fhBackSubtractionMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMin");
  for(Int_t j=1;j<=fhBackSubtractionMin->GetNbinsX();j++){
    fhBackSubtractionMin->SetBinContent(j,-0.00);
  }

  fhBackSubtractionMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBackSubtractionMax");
  for(Int_t j=1;j<=fhBackSubtractionMax->GetNbinsX();j++){
    fhBackSubtractionMax->SetBinContent(j,0.00);
  }

  
  // MC CORRECTIONS ( associatate track efficiency):
  //  -5%  +10% for assoc track eff 
  fhMCcorrectionsMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMin");
  for(Int_t j=1;j<=fhMCcorrectionsMin->GetNbinsX();j++){
    fhMCcorrectionsMin->SetBinContent(j,-0.00);
  }

  fhMCcorrectionsMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCcorrectionsMax");
  for(Int_t j=1;j<=fhMCcorrectionsMax->GetNbinsX();j++){
    fhMCcorrectionsMax->SetBinContent(j,0.00);
  }

  // MC D EFF CORRECTION
  fhMCDefficiencyMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMin");
  for(Int_t j=1;j<=fhMCDefficiencyMin->GetNbinsX();j++){
    fhMCDefficiencyMin->SetBinContent(j,-0.00);
  }

  fhMCDefficiencyMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCDefficiencyMax");
  for(Int_t j=1;j<=fhMCDefficiencyMax->GetNbinsX();j++){
    fhMCDefficiencyMax->SetBinContent(j,0.00);
  }


  // Contamination from secondary tracks
  fhSecContaminationMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMin");
  for(Int_t j=1;j<=fhSecContaminationMin->GetNbinsX();j++){
    fhSecContaminationMin->SetBinContent(j,-0.00);
  }

  fhSecContaminationMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhSecContaminationMax");
  for(Int_t j=1;j<=fhSecContaminationMax->GetNbinsX();j++){
    fhSecContaminationMax->SetBinContent(j,0.00);
  }


   // MC CLOSURE TEST (as flat contribution + modulation/sqrt(12) bilateral, i.e. total spread is modulation/sqrt(3))
  Double_t mod[6] = {0.,0.,0.,0.,0.,0.};
  AliHFCorrelationUtils::GetMCClosureModulation(20,1,99.,mod,2,3); //retrieve modulation value

  fhMCclosureTestMin=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMin");
  for(Int_t j=1;j<=fhMCclosureTestMin->GetNbinsX();j++){
    x=fhMCclosureTestMin->GetBinCenter(j);
    fhMCclosureTestMin->SetBinContent(j,-0.00); //flat contribution
  }

  fhMCclosureTestMax=(TH1D*)fhDeltaPhiTemplate->Clone("fhMCclosureTestMax");
  for(Int_t j=1;j<=fhMCclosureTestMax->GetNbinsX();j++){
    x=fhMCclosureTestMax->GetBinCenter(j);
    fhMCclosureTestMax->SetBinContent(j,0.00); //flat contribution
  }
  
  // Feed-down 

  fhBeautyFDmin=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmin");
  for(Int_t j=1;j<=fhBeautyFDmin->GetNbinsX();j++){
    x=fhBeautyFDmin->GetBinLowEdge(j);
    fhBeautyFDmin->SetBinContent(j,-0.00);
  }

  fhBeautyFDmax=(TH1D*)fhDeltaPhiTemplate->Clone("fhBeautyFDmax");
  for(Int_t j=1;j<=fhBeautyFDmax->GetNbinsX();j++){
    x=fhBeautyFDmax->GetBinLowEdge(j);
    fhBeautyFDmax->SetBinContent(j,0.00);   
  }
  
} //end of dummy case!
