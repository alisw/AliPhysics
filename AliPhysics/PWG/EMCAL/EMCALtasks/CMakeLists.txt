# **************************************************************************
# * Copyright(c) 1998-2014, ALICE Experiment at CERN, All rights reserved. *
# *                                                                        *
# * Author: The ALICE Off-line Project.                                    *
# * Contributors are mentioned in the code where appropriate.              *
# *                                                                        *
# * Permission to use, copy, modify and distribute this software and its   *
# * documentation strictly for non-commercial purposes is hereby granted   *
# * without fee, provided that the above copyright notice appears in all   *
# * copies and that both the copyright notice and this permission notice   *
# * appear in the supporting documentation. The authors make no claims     *
# * about the suitability of this software for any purpose. It is          *
# * provided "as is" without express or implied warranty.                  *
# **************************************************************************/

#Module
set(MODULE PWGEMCALtasks)
add_definitions(-D_MODULE_="${MODULE}")

# Module include folder
include_directories(${AliPhysics_SOURCE_DIR}/PWG/EMCAL/EMCALtasks)

# Additional includes - alphabetical order except ROOT
include_directories(${ROOT_INCLUDE_DIRS}
                    ${AliPhysics_SOURCE_DIR}/TENDER/Tender
                    ${AliPhysics_SOURCE_DIR}/TENDER/TenderSupplies
                    ${AliPhysics_SOURCE_DIR}/OADB
                    ${AliPhysics_SOURCE_DIR}/OADB/COMMON/MULTIPLICITY
                    ${AliPhysics_SOURCE_DIR}/PWG/Tools
                    ${AliPhysics_SOURCE_DIR}/PWG/Tools/yaml-cpp/include
                    ${AliPhysics_SOURCE_DIR}/PWG/EMCAL/EMCALbase
                    ${AliPhysics_SOURCE_DIR}/PWG/EMCAL/EMCALtrigger
  )

# Sources - alphabetical order
set(SRCS
  AliAnalysisTaskEMCALClusterizeFast.cxx
  AliAnalysisTaskEmcalSample.cxx
  AliAnalysisTaskEmcalTriggerPatchClusterMatch.cxx
  AliAodSkimTask.cxx
  AliEMCALClusterParams.cxx
  AliEmcalAodTrackFilterTask.cxx
  AliEmcalClusTrackMatcherTask.cxx
  AliEmcalClusterMaker.cxx
  AliEmcalCompatTask.cxx
  AliEmcalDebugTask.cxx
  AliEmcalEsdTrackFilterTask.cxx
  AliEmcalMCTrackSelector.cxx
  AliEmcalParticleMaker.cxx
  AliEmcalPatchFromCellMaker.cxx
  AliEmcalPhysicsSelectionTask.cxx
  AliEmcalPicoTrackMaker.cxx
  AliEmcalTenderTask.cxx
  AliEmcalTrackingQATask.cxx
  AliEmcalTrackPropagatorTask.cxx
  AliEmcalCellMonitorTask.cxx
  AliEmcalFastOrMonitorTask.cxx
  AliEmcalTriggerRejectionMaker.cxx
  AliEsdSkimTask.cxx
  AliEsdTrackExt.cxx
  AliHadCorrTask.cxx
  AliEMCALConfiguration.cxx
  AliEMCALConfigHandler.cxx
  AliEMCALConfigurationMatcher.cxx
  AliAnalysisTaskEmcalTriggerSelection.cxx
  AliAnalysisTaskEmcalTriggerNormalization.cxx
  AliAnalysisTaskEmcalIteratorTest.cxx
  AliEmcalCopyCollection.cxx
  AliEmcalCorrectionEventManager.cxx
  AliEmcalCorrectionTask.cxx
  AliEmcalCorrectionComponent.cxx
  AliEmcalCorrectionCellBadChannel.cxx
  AliEmcalCorrectionCellEnergy.cxx
  AliEmcalCorrectionCellTimeCalib.cxx
  AliEmcalCorrectionCellEmulateCrosstalk.cxx
  AliEmcalCorrectionCellCombineCollections.cxx
  AliEmcalCorrectionClusterizer.cxx
  AliEmcalCorrectionClusterNonLinearity.cxx
  AliEmcalCorrectionClusterNonLinearityMCAfterburner.cxx
  AliEmcalCorrectionClusterExotics.cxx
  AliEmcalCorrectionClusterTrackMatcher.cxx
  AliEmcalCorrectionClusterHadronicCorrection.cxx
  AliEmcalCorrectionCellEnergyVariation.cxx
  AliEmcalCorrectionClusterEnergyVariation.cxx
  AliEmcalCorrectionPHOSCorrections.cxx
  AliAnalysisTaskEmcalOccupancy.cxx
  TestAliEmcalAODFilterBitCuts.cxx
  TestAliEmcalTrackSelection.cxx
  )

# Headers from sources
string(REPLACE ".cxx" ".h" HDRS "${SRCS}")

# Generate the dictionary
# It will create G_ARG1.cxx and G_ARG1.h / ARG1 = function first argument
get_directory_property(incdirs INCLUDE_DIRECTORIES)
generate_dictionary("${MODULE}" "${MODULE}LinkDef.h" "${HDRS}" "${incdirs}")

# Add a shared library
add_library_tested(${MODULE} SHARED  ${SRCS} ${HDRS} ${MODULE}LinkDef.h G__${MODULE}.cxx)

# Generate the ROOT map
# Dependecies
set(LIBDEPS ANALYSIS ANALYSISalice AOD OADB CDB EMCALrec EMCALUtils ESD PWGEMCALbase PWGEMCALtrigger PWGTools STEER STEERBase Tender)
generate_rootmap("${MODULE}" "${LIBDEPS}" "${CMAKE_CURRENT_SOURCE_DIR}/${MODULE}LinkDef.h")

# Link against yaml-cpp. It must be included _after_ the ROOT map because it is static rather than shared!
set(LIBDEPS ${LIBDEPS} yaml-cpp)

# Generate a PARfile target for this library
add_target_parfile(${MODULE} "${SRCS}" "${HDRS}" "${MODULE}LinkDef.h" "${LIBDEPS}")

# Linking the library
target_link_libraries(${MODULE} ${LIBDEPS})

# Public include folders that will be propagated to the dependecies
target_include_directories(${MODULE} PUBLIC ${incdirs})

# System dependent: Modify the way the library is build
if(${CMAKE_SYSTEM} MATCHES Darwin)
    set_target_properties(${MODULE} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif(${CMAKE_SYSTEM} MATCHES Darwin)

# Installation
install(TARGETS ${MODULE} 
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib)
install(FILES ${HDRS} DESTINATION include)
