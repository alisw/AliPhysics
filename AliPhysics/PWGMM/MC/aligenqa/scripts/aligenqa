#! /usr/bin/python2
"""
Generate a pdf comparing the plots from two different input files
"""

import argparse
import os
import re
import sys

from rootpy import log, ROOT

from aligenqa.plotting import Plotting
from aligenqa import utils, compare, summarize, settings


log = log["/aligenqa"]  # set name of this script in logger


class formatter_class(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawTextHelpFormatter):
    pass

parser = argparse.ArgumentParser(formatter_class=formatter_class)
parser.add_argument('-v', '--verbose', action='store_true', default=False)
subparsers = parser.add_subparsers()


def prepare_plots(args):
    """
    This will download AnalysisResults.root from the given alien path
    into the current directory. The file name is composed of the train
    id and generator name as given in the trains `env.sh`
    file. Subsequently, "all" plots are created and saved in to the
    AnalysisResults.root file. This step needs to be taken before
    creating summary or comparison PDFs. This operation requrires a
    valid alien-token!
    """
    ROOT.gROOT.SetBatch(True)
    gen_name = utils.get_generator_name_from_train(args.input_file)
    train_number = re.match(r'.*/(\d+_\d{8}-\d{4})', args.input_file).groups()[-1]
    _, fext = os.path.splitext(os.path.basename(args.input_file))
    local_path = os.path.abspath(os.path.join("./", "{0}-{1}{2}".format(train_number, gen_name, fext)))
    print "Trying to copy {0} to {1}".format(args.input_file, local_path)
    utils.download_file(args.input_file, local_path)
    print "Copied {0} to {1}".format(args.input_file, local_path)

    for global_trigger in settings.considered_triggers:
        sums_dir_name = "Sums" + global_trigger
        results_dir_name = "results_post" + global_trigger

        plotting = Plotting(f_name=local_path, sums_dir_name=sums_dir_name, results_dir_name=results_dir_name,
                            percentile_bins=settings.percentile_bins, considered_ests=settings.considered_ests)

        # call Plotting's memberfunctions to create the desired plots:
        plotting.plot_dNdetas(ratio_to_mb=False)
        plotting.plot_dNdetas(ratio_to_mb=True)
        plotting.plot_PNch_summary()
        plotting.plot_PNch()
        plotting.plot_mult_vs_pt()
        plotting.plot_meanpt_vs_ref_mult_for_pids()
        plotting.plot_pt_distribution_ratios()
        plotting.plot_pid_ratio_vs_refmult()
        plotting.plot_dNdpT(pid_selection='ch')
        plotting.plot_dNdpT(pid_selection='p')
        plotting.plot_dNdpT(pid_selection='pi')
        plotting.plot_dNdpT(pid_selection='K')
        plotting.plot_pT_HM_div_pt_MB(scale_nMPI=False)
        plotting.plot_pT_HM_div_pt_MB(scale_nMPI=True)
        plotting.plot_nMPI_vs_Nch()

parser_prepare_plots = subparsers.add_parser('prepare_plots', description=prepare_plots.__doc__)
parser_prepare_plots.add_argument('input_file', type=str, help="Path to file containing the input data")
parser_prepare_plots.set_defaults(op=prepare_plots)


parser_summarize = subparsers.add_parser('summarize', description=summarize.__doc__)
parser_summarize.add_argument('input_file', type=str, help="Path to file containing the input data")
parser_summarize.add_argument('--gen_name', type=str,
                              help="Name of the generator and tune. If not given, deduced from filename")
parser_summarize.set_defaults(op=summarize)


description = "Create comparison plots between two given generators"
parser_compare = subparsers.add_parser('compare', description=compare.__doc__)
parser_compare.add_argument("input_file1", type=str, help="Path to the first file to be compared")
parser_compare.add_argument("trigger1", type=str, help="Trigger of interest in first file",
                            choices=settings.considered_triggers)
parser_compare.add_argument("--generator_name1", type=str, help="Overwrite name and tune of first generator.")
parser_compare.add_argument("input_file2", type=str, help="Path to the second file to be compared")
parser_compare.add_argument("trigger2", type=str, help="Trigger of interest in second file",
                            choices=settings.considered_triggers)
parser_compare.add_argument("--generator_name2", type=str, help="Overwrite name and tune of second generator")

parser_compare.set_defaults(op=compare)

args = parser.parse_args()
try:
    args.op(args)
except KeyboardInterrupt:
    sys.exit(1)
except Exception as e:
    if args.verbose:
        # re-raise with the full traceback
        t, v, tb = sys.exc_info()
        raise t, v, tb
    else:
        sys.exit("{0}: {1}".format(e.__class__.__name__, e))
