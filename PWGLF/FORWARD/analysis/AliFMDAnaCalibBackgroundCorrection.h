#ifndef ALIFMDANACALIBBACKGROUNDCORRECTION_H
#define ALIFMDANACALIBBACKGROUNDCORRECTION_H

#include <TObject.h>
#include <TObjArray.h>
// #include <TH2F.h>
#include <TAxis.h>
#include <TList.h>
class TH2F;
class TH1F;
class TBrowser;

/**
 * @ingroup FMD_ana
 * @brief Object to store secondary corrections. 
 *
 * Objects of this class contains 1 2D histogram per detector,ring 
 * per vertex bin.   The histogram is an (eta,phi) histogram of the ratio
 * of total number of particles (seconary+primary) to the number of 
 * primary particles.   
 * 
 * Objects of this class are generated by 
 * @todo  expand documentation 
 * 
 */
class AliFMDAnaCalibBackgroundCorrection : public TObject
{
public:
  /** 
   * Constructor
   */  
  AliFMDAnaCalibBackgroundCorrection();
  /** 
   * Copy constructor
   * 
   * @param o Object to copy from 
   */
  AliFMDAnaCalibBackgroundCorrection(const AliFMDAnaCalibBackgroundCorrection& o);
  /** 
   * Assignment operator 
   * 
   * @param o Object to assign from 
   * 
   * @return Reference to this object 
   */
  AliFMDAnaCalibBackgroundCorrection& operator=(const AliFMDAnaCalibBackgroundCorrection& o);
  
  /** 
   * Get the background (secondary) correction
   * 
   * @param det     Detector
   * @param ring    Ring
   * @param vtxbin  Vertex bin
   * 
   * @return 2D Histogram (eta,phi) secondary correction map
   */  
  TH2F*   GetBgCorrection(Int_t det, Char_t ring, Int_t vtxbin) const;
  /** 
   * Set the background correction 
   * 
   * @param det          Detector
   * @param ring         Ring 
   * @param vtxbin       Vertex bin 
   * @param hCorrection  2D Histogram (eta,phi) secondary correction map
   */
  void    SetBgCorrection(Int_t det, Char_t ring, Int_t vtxbin, 
			  TH2F* hCorrection);
  /** 
   * Get the Non-single-diffractive secondary correction map
   * 
   * @param det    Detector   
   * @param ring   Ring 	    
   * @param vtxbin Vertex bin 
   * 
   * @return 2D Histogram (eta,phi) secondary correction map
   */
  TH2F*   GetNSDBgCorrection(Int_t det, Char_t ring, Int_t vtxbin) const;
  /** 
   * Set the Non-single-diffractive secondary correction map
   * 
   * @param det         Detector   
   * @param ring        Ring 	    
   * @param vtxbin      Vertex bin 
   * @param hCorrection 2D Histogram (eta,phi) secondary correction map
   */
  void    SetNSDBgCorrection(Int_t det, Char_t ring, Int_t vtxbin, 
			     TH2F* hCorrection);
  
  /** 
   * Get the double hit correction 
   * 
   * @param det   Detector 
   * @param ring  Ring
   * 
   * @return 1D histogram (eta) of correction
   */  
  TH1F*   GetDoubleHitCorrection(Int_t det, Char_t ring) const;
  /** 
   * Set the double hit correction 
   * 
   * @param det         Detector 
   * @param ring        Ring
   * @param hCorrection 1D histogram (eta) of correction
   */  
  void    SetDoubleHitCorrection(Int_t det, Char_t ring, TH1F* hCorrection);
  /** 
   * Get the SPD dead correction 
   * 
   * @param vtxbin Vertext bin 
   * 
   * @return 1D Histogram (eta) of SPD dead correction
   */
  TH1F*   GetSPDDeadCorrection(Int_t vtxbin) const;
  /** 
   * Set the SPD dead correction 
   * 
   * @param vtxbin      Vertex bin 
   * @param hCorrection 1D Histogram (eta) of SPD dead correction
   */
  void    SetSPDDeadCorrection(Int_t vtxbin, TH1F* hCorrection);
  /** 
   * Get the FMD dead correction 
   * 
   * @param vtxbin Vertext bin 
   * 
   * @return 1D Histogram (eta) of FMD dead correction
   */
  TH1F*   GetFMDDeadCorrection(Int_t vtxbin);
  /** 
   * Set the FMD dead correction 
   * 
   * @param vtxbin      Vertex bin 
   * @param hCorrection 1D Histogram (eta) of FMD dead correction
   */
  void    SetFMDDeadCorrection(Int_t vtxbin, TH1F* hCorrection);
  /** 
   * Set the reference axis 
   * 
   * @param axis Axis of vertex bins 
   */
  void    SetRefAxis(TAxis* axis);
  /** 
   * Get the vertex axis 
   * 
   * @return Constant reference to vertex axis 
   */
  const TAxis& GetRefAxis() const { return fAxis; }
  /** 
   * Get the number of vertex bins 
   * 
   * @return Number of vertex bins 
   */
  Int_t   GetNvtxBins() const { return fAxis.GetNbins(); }
  /** 
   * Get the maximum vertex cut (in cm)
   * 
   * @return Maximum absolute value of the Z position of the vertex 
   */
  Float_t GetVtxCutZ() const { return fAxis.GetXmax(); }
  /** 
   * Initialize 
   * 
   */
  void    Init();
  /** 
   * Nice browsing 
   * 
   * 
   * @return 
   */
  Bool_t  IsFolder() const { return kTRUE; }
  /** 
   * Nice browsing 
   * 
   * @param b Browser 
   */
  void    Browse(TBrowser* b);
protected:
  /** 
   * Get the ring array  
   * 
   * @param det   Detector 
   * @param ring  Ring 
   * 
   * @return 
   */  
  TObjArray* GetRingArray(Int_t det, Char_t ring) const;
  TObjArray  fArray;                           // Array
  TAxis      fAxis;                            // Vertex axis
  Bool_t     fIsInit;                          // Whether this has been init
  TList      fListOfDoubleHitCorrection;       // Double hit corrections
  TList      fListOfNSDBgMaps;                 // NSD bg maps
  ClassDef(AliFMDAnaCalibBackgroundCorrection,3);
};

#endif
// Local Variables:
//   mode: C++
// End:
